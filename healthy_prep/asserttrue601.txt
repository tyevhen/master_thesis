original image click enlarge image smart blur applied notice outlines preserved even oranges overlap one favorite photoshop effects smart blur provides seemingly effortless way smooth jpeg artifacts remove blemishes skin photographs people etc utility lies fact despite considerable blurriness imparts many regions image preserves outlines fine details important parts image usually thus gives effect magically blurring parts image want blurred key smart blur works preferentially blurs parts image sparse detail rich low frequency information leaving untouched parts image comparatively rich detail rich high frequency information abrupt transitions tone ignored areas subtle change smoothed thus made even subtle algorithm quite straightforward march image pixel pixel pixel analyze adjacent region say adjoining pixel pixel square calculate metric pixel variance region compare variance predetermined threshold value variance exceeds threshold nothing variance less threshold apply blurring source pixel vary amount blurring according variance low variance blurring high variance less blurring implementation presented i start cloning current image massively blurring entire cloned image i march pixels original image begin region region analysis i need apply blurring i derive new pixel linear interpolation original cloned image pixels first thing need routine linear interpolation two values corresponding routine linear interpolation two pixel values linear interpolation easy public double lerp double double double amt return amt linear interpolation pixels tedious looking straightforward lerppixel oldpixel newpixel double amt oldred oldpixel newred newpixel red lerp doubleoldred doublenewred amt oldgreen oldpixel newgreen newpixel green lerp doubleoldgreen doublenewgreen amt oldblue oldpixel newblue newpixel blue lerp doubleoldblue doublenewblue amt return red green blue another essential routine need routine analyzing pixel variance region i use root mean square error public double rmserror pixels double ave i i pixels length i ave pixels i ave pixels length double diff double accumulator i i pixels length i diff pixels i ave diff diff accumulator diff double rms accumulator pixels length rms math sqrt rms return rms transform image code opens image displays jframe following code takes image whose path supplied command line argument opens displays jcomponent inside jframe import java graphics import java image bufferedimage import java io file import javax imageio imageio import javax swing jcomponent import javax swing jframe public class imagewindow inner class canvas draw image class imagepanel extends jcomponent bufferedimage theimage null imagepanel bufferedimage image super theimage image public bufferedimage getimage return theimage public void setimage bufferedimage image theimage image updatepanel public void updatepanel invalidate getparent dolayout repaint public void paintcomponent graphics theimage getwidth theimage getheight drawimage theimage end imagepanel inner class constructor public imagewindow string args open image bufferedimage image openimagefile args create panel imagepanel theimagepanel new imagepanel image display panel jframe createwindowforpanel theimagepanel args filter image filterimage theimagepanel public void filterimage imagepanel panel smartblurfilter filter new smartblurfilter bufferedimage newimage filter filter panel getimage panel setimage newimage public void createwindowforpanel imagepanel theimagepanel string name bufferedimage image theimagepanel getimage jframe mainframe new jframe mainframe settitle name mainframe setbounds image getwidth image getheight mainframe setdefaultcloseoperation mainframe getcontentpane add theimagepanel mainframe setvisibletrue bufferedimage openimagefile string fname bufferedimage img null try file f new file fname f exists img imageio readf catch exception printstacktrace return img public static void main string args new imagewindow args note method filterimage instantiate smartblurfilter without ado full code smartblurfilter import java image kernel import java image bufferedimage import java image convolveop import java graphics public class smartblurfilter double sensitivity region size float kernelarray kernel kernel new kernel normalizekernel kernelarray float normalizekernel float i i length i i i i length i i return public double lerp double double double amt return amt public double getlerpamount double double cutoff cutoff return return cutoff public double rmserror pixels double ave i i pixels length i ave pixels i ave pixels length double diff double accumulator i i pixels length i diff pixels i ave diff diff accumulator diff double rms accumulator pixels length rms math sqrt rms return rms getsample bufferedimage image size pixels try bufferedimage subimage image getsubimage size size pixels subimage getrgb size size null size catch exception arrive requested pixels outside image bounds return pixels lerppixel oldpixel newpixel double amt oldred oldpixel newred newpixel red lerp doubleoldred doublenewred amt oldgreen oldpixel newgreen newpixel green lerp doubleoldgreen doublenewgreen amt oldblue oldpixel newblue newpixel blue lerp doubleoldblue doublenewblue amt return red green blue blurimage bufferedimage image orig blur double sensitivity newpixel double amt size region size i i orig length i image getwidth pix getsample image i i size pix length continue amt getlerpamount rmserror pix sensitivity newpixel lerppixel blur i orig i amt orig i newpixel return orig public bufferedimage filter bufferedimage image convolveop convolver new convolveopkernel convolveop edge op null clone image target bufferedimage target new bufferedimageimage getwidth image getheight image gettype graphics target creategraphics drawimageimage null dispose target getwidth target getheight get source pixels pixels image getrgb null blur cloned image target convolver filtertarget image get blurred pixels blurrypixels target getrgb null go thru image interpolate values pixels blurimageimage pixels blurrypixels sensitivity replace original pixels new ones image setrgb pixels return image despite intensive image analysis routine fairly fast machine takes one second process image slower photoshop factor five still bad given java ideas development substitute directional blur non directional blur substitute sobel kernel blur kernel try sorts kernels well