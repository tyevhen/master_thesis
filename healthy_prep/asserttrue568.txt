screenshot user interface procedural texture app i playing around canvas api time i decided create simple page exposes interface creating procedural textures behind scenes i included perlin famous noise function see yesterday post details result tool powerful fast fun play best part need host files server run app straight disk security restrictions chrome firefox canvas capable browser interface simple text box type code see illustration right whatever type executed every pixel canvas exposed globals include coordinate current pixel coord current pixel width canvas pixels height canvas r red channel current pixel green value current pixel blue value current pixel perlinnoise noise v perlin noise function offhand would think loop calls callback every pixel canvas image would fast reality procedural shader call rate million pixels per second make calls perlin noise function loop slow k pixels per second still pretty good versatility noise function truly amazing key using effectively understand scale appropriately scaling parameters stretch noise space degree want achieve colorful results course applying result creative ways r channels example texture achieved following shader code perlinnoise noisex math cos r math roundn r r instance noise scaled differently reflected back speak using cosine function color channels fiddled way whatever red blue normalizing texture space various ways end surprising effects example consider centerx centery dx centerx dy centery dist dx dx dy dy perlinnoise noisex r dist math round r case calculate pseudo distance center image dx dx dy dy scaled fiddle colors make result red black background parameters noise scaled give relatively fine grain noise download code procedural shader page given play texture try substituting larger smaller values scaling numbers see happens dramatically different effect obtained normalizing applying trig functions creatively sizex sizey perlinnoise noisesizex sizey math cosn math pi math sqrtx r decide download code try playing various sizing parameters see effect image best way get feel going know played procedural textures get lot mileage normalizing first keep range using functions also normalized produce output range sine cosine course easily normalized stay range goes without saying number range squared squared rooted still fall range ready apply number color channel course multiply result range i included number presets procedural texture page including code foregoing images another one i like size perlinnoise noisesize size math sinn math cosn r math sinn i call noisy rainbow without noise term simply paints rainbow across image space little added noise gives effect shown code includes examples shown i encourage download play simply copy paste code text file give name ends open chrome firefox canvas capable browser head script canvas demo kas thomas asserttrue blogspot use risk context null canvas null window onload function canvas document getelementbyid mycanvas canvas addeventlistener'mousemove handlemousemove false context canvas getcontext loadhiddentext function loadhiddentext var options document getelementsbytagname option var spans document getelementsbytagname span var i i options length i options i value spans i innerhtml probably called resetcanvas function clearimage canvas width canvas width function drawviacallback var canvas width var canvas height var canvasdata context getimagedata var idx var index pixel array idx rgb values var r canvasdata data idx var canvasdata data idx var canvasdata data idx var pixel callback r canvasdata data idx pixel canvasdata data idx pixel canvasdata data idx pixel context putimagedata canvasdata function fillcanvas color context fillstyle color context fillrect canvas width canvas height function dopixelloop var code document getelementbyid code value var f callback function pixel var r pixel var pixel var pixel code return r try evalf fillcanvas ffffff drawviacallback catche alert error tostring function handlemousemove ev var get mouse position relative canvas element ev layerx ev layerx firefox ev layerx ev layery else ev offsetx ev offsetx opera ev offsetx ev offsety document getelementbyid mycanvas title port ken perlin java code perlinnoise new function noise functionx z var p new array var permutation var i i i p i p i permutation i var math floorx find unit cube math floory contains point z math floorz math floorx find relative z math floory point cube z math floorz var fadex compute fade curves v fadey z fadez var p aa p z ab p z hash coordinates p ba p z bb p z cube corners return scalelerpw lerpv lerpu gradp aa z add gradp ba z blended lerpu gradp ab z results gradp bb z lerpv lerpu gradp aa z corners gradp ba z cube lerpu gradp ab z gradp bb z function fadet return function lerp return function gradhash z var hash convert lo bits hash code var gradient directions v z return v v function scalen return script head body canvas id mycanvas width height canvas br input type button value erase onclick clearimage select onchange document getelementbyid'code innerhtml value option choose something click execute option option basic perlin noise option option waterfall option option spherical nebula option option green fibre bundle option option orange blue marble option option blood maze option option yellow lightning option option downward rainbow wipe option option noisy rainbow option option burning cross option select br textarea id code type textarea cols rows enter code textarea br input type button value execute onclick dopixelloop input type button value open png onclick window opencanvas todataurl'image png begin hidden text div hidden true span enter code span span size perlinnoise noisesize size r span span perlinnoise noisex math round r span span centerx centery dx centerx dy centery dist dx dx dy dy perlinnoise noisex r dist math round r span span sizex sizey perlinnoise noisesizex sizey math sin math sinn r span span centerx centery dx centerx dy centery dist math sqrtdx dx dy dy perlinnoise noisex dterm dist math round r dist dterm dist r dist dterm span span perlinnoise noisex math cos r math roundn r r span span sizex sizey perlinnoise noisesizex sizey math cosn math pi math sqrtx r span span uses perlin noise math sin math cos r math sin span span size perlinnoise noisesize size math sinn math cosn r math sinn span span size perlinnoise noisesize size math cosn math pi math cos math pi math sqrtx math sqrty r r r span div end hidden text body texture presets placed hidden div containing bunch span elements runtime dropdown menu populated loadhiddentext perlin noise function may look intimidating really port ken perlin java based reference implementation noise see yesterday post information meantime i encourage use demo explore possibilities procedural texture creation canvas i hope agree me lot fun educational well