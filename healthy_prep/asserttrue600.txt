original image lena left image transformed via smart sobel right last time i talked implement smart blur latter gets smartness fact blur effect applied preferentially less noisy parts image tactic used filter effects well take sobel kernel example float kernel convolving image kernel tends produce image edges preserved rather harsh fashion seen ordinary sobel transformation produces rather harsh result effect whose harshness begs tamed smart approach smart sobel filter would apply maximum sobel effect least noisy parts image sobel filtering busiest parts image interpolate two extremes parts image easy trivial modifications smart blur code i gave last time without ado code smart sobel filter import java image kernel import java image bufferedimage import java image convolveop import java graphics public class smartsobelfilter double sensitivity region size float kernelarray kernel kernel new kernel kernelarray float normalizekernel float i i length i i i i length i i return public double lerp double double double amt return amt public double getlerpamount double double cutoff cutoff return return cutoff public double rmserror pixels double ave i i pixels length i ave pixels i ave pixels length double diff double accumulator i i pixels length i diff pixels i ave diff diff accumulator diff double rms accumulator pixels length rms math sqrt rms return rms getsample bufferedimage image size pixels try bufferedimage subimage image getsubimage size size pixels subimage getrgb size size null size catch exception arrive requested pixels outside image bounds return pixels lerppixel oldpixel newpixel double amt oldred oldpixel newred newpixel red lerp doubleoldred doublenewred amt oldgreen oldpixel newgreen newpixel green lerp doubleoldgreen doublenewgreen amt oldblue oldpixel newblue newpixel blue lerp doubleoldblue doublenewblue amt return red green blue blurimage bufferedimage image orig blur double sensitivity newpixel double amt size region size i i orig length i image getwidth pix getsample image i i size pix length continue amt getlerpamount rmserror pix sensitivity newpixel lerppixel blur i orig i amt orig i newpixel return orig public void invert pixels i i pixels length i pixels i pixels i public bufferedimage filter bufferedimage image convolveop convolver new convolveopkernel convolveop edge op null clone image target bufferedimage target new bufferedimageimage getwidth image getheight image gettype graphics target creategraphics drawimageimage null dispose target getwidth target getheight get source pixels pixels image getrgb null blur cloned image target convolver filtertarget image get blurred pixels blurrypixels target getrgb null invert blurrypixels go thru image interpolate values pixels blurimageimage pixels blurrypixels sensitivity replace original pixels new ones image setrgb pixels return image use filter instantiate call filter method passing java image bufferedimage method returns transformed bufferedimage two knobs tweak sensitivity region size former affects much interpolation happens native pixels transformed pixels larger value means extreme sobel effect latter size neighboring region analyzed noisiness step image pixel pixel parameter affects blocky final image looks ideas development develop smart sharpen filter combine displacement filter paintbrush effects overlay combine image copies transformed various values sensitivity region size reduce blockiness