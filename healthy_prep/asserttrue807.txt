timothy fitz imvu written excellent piece fail fast methodology continuous deployment case explaining benefits putting changes production immediately continuously imvu case mean nightly builds means several times hour main intuition i greatly oversimplify sake claraity much greater chance isolating line code caused build break publish build every time change line code sounds obvious terrifying course makes sense works imvu takes million dollars month serving avatars virtual goods several hundred thousand active users another ten million occasional users course users serving builds super frequently guarantee find bugs quickly change lots code minute publishing cycles whatever interval turns could end real troubleshooting mess although even case know immediately build roll back order get customers back well behaved software continuous deployment guarantee good design course qa panacea wo keep introducing code design patterns fail scale example still interesting concept consider theory successful high traffic site built methodology fitz original post incidentally well followup post drew ton responses many comments original post negative explaining fail fast dangerous would work situations etc totally ignoring fact works well imvu comments followup post much less cry baby much better reasoned fitz much says straight unit testing overrated i totally agree automated testing general gets short shrift fitz notes wryly automated tests brutal random malicious ignorant aggressive sum users software breaks service precisely ca predict advance break like static analysis fact code compiles without warnings mean wo fail service fitz mention plus side continuous deployment i think extremely important puts enormous pressure programmers get right first time utterly unforgiving sloth imagine knowing every time check code goes live minutes later i think would incent me write pretty damn solid code case makes interesting food thought kudos fitz go imvu guys rock