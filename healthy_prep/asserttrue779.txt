yesterday someone i follow twitter johnstack said enjoyed post writing faster code asked i refer examples less go fast canonical examples algorithms abound i wo attempt list quicksort versus bubble sort example comes mind although worst case performance actually algorithms often true divide conquer approaches one outstanding less algorithms time would fast fourier transform anticipated carl friedrich gauss made popular cooley tukey less always mean choosing different algorithm sometimes need parameterize problem properly i mean parameterize rigorous mathematical sense i talking rethinking problem define attack fundamentally new way find plenty examples sort thing graphics programming particularly graphics graphics gems series books abounds examples less go fast source code mostly books downloaded way i wrote article mactech fast graphics rendering strategies mac back apple using powerpc processors article contains lot stuff faster tips tricks certainly adapted non mac systems like article even might also want look dope vectors sometimes called iliffe arrays son years old showed me particularly egregious example code need optimization day justin big fan runescape massive online adventure game obtained java source code one many knock offs runescape server floating around web i looked main loop sat stunned minutes contained easily largest continuous sequence elses i ever seen elses piled thick justin tried insert one extra else expression class would longer compile code big something like error message turns java hard coded max size limit per method k source code sun way lenient though i think limit something closer k kind thing javascript language supports pointers functions would prime candidate jump table conflation natural syntax long runs elses java javascript course switch statement compiler covers implements jump table usually also implement directly javascript horrible runescape hacker way function updateuser user user something state good handlegood user else user something state bad handlebad user else user something state terrible handleterrible user else user something state messed handlemessedup user else kbytes jump table way error checking omitted function updateuser user var table state good handlegood state bad handlebad state terrible handleterrible state messed handlemessedup table user something user dispatch ideally course initialize static table keep permanent copy somewhere always create time enter updateuser method even create every time still cheaper crunching ridiculously long list elses moral case whenever see big long run elses consider someone handed optimization opportunity tomorrow post i going run code fast set manipulation javascript fun i throw console ajax quick look twitter social graph rest api snippets i want show wo win prizes elegance hey console code talking prettiness requirements list later