i talking lot feature richness measure product complexity might i care case feature count per se complexity per se product perceived utility ease use matters involving feature count may actually useful talk total gui surface area features often equate least rough sense clicks controls various sorts push buttons radio buttons checkboxes menu selections color pickers calendar controls etc sense feature count gui surface area go hand hand calculate gui surface area dialogs ui elements tend grow proportion app functionality add actual screen real estate consumed dialogs toolbars palettes tabs menus product pixels squared call ui surface area i offer without proof conjecture program perceived complexity related suitably subtle way program total gui surface area i also contend bigger product total gui surface area smaller user made feel moreover product total functional surface area far exceeds customer actual use case requirements unavoidable impression waste conveyed customer might well infer product came culture waste engineering culture value efficiency devastating assumption let take root customer mind really want customer feel paid good money unnecessary functionality ever know eighty percent customers ever use twenty percent software features really want brag marketing extravagant excess functionality product important able emphasize inarguably superior nature product core functionality non core functionality non core marketing dialogs customer demands otherwise tomorrow post i offer constructive suggestions software makers ideas actually implemented tested argue ideas test