perlin noise two dimensions generated using code i working canvas based procedural texture demo i blog tomorrow i javascript port ken perlin noise routine java ahead tomorrow blog i thought i briefly discuss perlin noise perlin noise worked graphics programs already well familiar ken perlin famous noise function gives rise called perlin noise code looks little scary intuitively easy function understand let take case although generate perlin noise number dimensions imagine pixel square image blank white imagine i come along tell mark canvas rows columns pixel squares imagine i ask assign random grey value square got kind checkerboard pattern random greys differentiates perlin noise random checkboard noise perlin case color values interpolated smoothly center tile outward way see obvious gridlike pattern words cross tile boundary want slope pixel intensity constant discontinuities visualize end result took random checkboard pattern passed gaussian blur times pretty soon would even able tell gridlines ever existed first place idea perlin noise want interpolate colors one block next way discontinuities cell boundaries turns requirement met quite variety ways using cubic splines quartics even sine cosine based interpolation squares example using perlin gain function one correct way i love able link good perlin noise tutorial web far i found one try conflate fractal noise turbulence topics perlin noise best treatment i come across frankly surprisingly perlin texturing modeling book truly first rate book must reading graphics programmers fortunately ken perlin done hard work writing necessary interpolation code noise kindly provided reference implementation noise function highly optimized java i ported code javascript see i happy say works well canvas environment see tomorrow post right reasonably fast fact fast need fall back version better speed good version gives added versatility case decide want animate noise time domain usage perlin function straightforward takes arguments java double precision floating point numbers fine javascript numbers ieee double precision floating point numbers covers way function usually used first two arguments correspond coordinate values pixel space working space third argument z value space call noise function third argument set whatever like animation want texture animate real time link third argument z value time based index texture animate smoothly effect sampling closely spaced slices noise space return value noise double precision floating point number range actually perlin original code return value range javascript port i clamp return code port ken perlin java code original java code cs nyu edu eperlin noise note version number returned perlinnoise new function noise functionx z var p new array var permutation var i i i p i p i permutation i var math floorx find unit cube math floory contains point z math floorz math floorx find relative z math floory point cube z math floorz var fadex compute fade curves v fadey z fadez var p aa p z ab p z hash coordinates p ba p z bb p z cube corners return scalelerpw lerpv lerpu gradp aa z add gradp ba z blended lerpu gradp ab z results gradp bb z lerpv lerpu gradp aa z corners gradp ba z cube lerpu gradp ab z gradp bb z function fadet return function lerp return function gradhash z var hash convert lo bits hash code var gradient directions v z return v v function scalen return let say function marches pixel values image want use code need coordinates pixel width image height could something like normalize size pick scaling value perlinnoise noise size size r math round z argument arbitrarily set could well set zero whatever like fiddle size get result visually pleasing vary considerably depending effect trying achieve animating texture next time step might set z arg say instead example given setting r course gives grey pixel overall result looks like picture top post fact image generated using code shown perlin justly famous noise function enormously versatile ton fun play i say authoritative depth discussion occurs perlin texturing modeling book see colorful uses noise function tomorrow blog miss