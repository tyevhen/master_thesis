matt asay blogged day michael nygard enterprise software shockingly bad i could help smile sadly nod head wipe virtual tear cheek obviously everything world enterprise software poorly done exciting things going fact i know exactly people mean say enterprise software sucks enterprise software typically big slow fugly starters gui one often usability disaster sometimes strange functionality holes things work way expect course lot time software plain unstable ends detonating i worked r two software companies one large one small companies made java enterprise software rest assured shipped share chunkblowers one case created sizable collection connectors priced around k designed let customers integrate popular products sap jd edwards lawson peoplesoft siebel ibm others i took classroom training remote systems i mortified inferior user facing pieces expensive middleware products compared desktop software i use every day i first arrived enterprise software world wide eyed noob shock senses i noticed number things right bat data particular data integrity matters anything else throw exceptions day long lose data getting job done top priority get done matter much getting done mission critical software somehow manages job matter poorly life goes world comes end user interfaces designed developers kind like letting welders plastic surgery usability testing happens happens near end development cycle late customers alas know good ui design tell work easy installation experience perceived anything solving business problems orthogonal hence priority hence software installation setup tends brutally punishing experience interoperability standards friendly means putting everything xml using inscrutable custom schema one else uses describing one proprietary interfaces wsdl tell customers web services api customers finding software easy use get enough training software slow need bigger machine frequently heard phrases fixpack coming look logs first person report macro sense enterprise software ends disappointing two main reasons i think first process surrounding enterprise software procurement deployment typically somewhat thick involving large numbers stakeholders fair amount bureaucracy bureacracy people get involved greater likelihood failed exercise groupthink lot really poor decisions get made well meaning people working together large committees bottom line flawed procurement process leads situations checkboxes checked yet one happy second thing making good software product hard requires extra effort means extra cost manufacturers like extra costs substantial built incentive turn software good enough better mcdonalds get successful company fast food business ibm food producing great food important clear produce food good enough price point hits sweet spot delivery mechanism allows customers consume product way want car way someplace else secret sauce little i think things getting better enterprise software suck much ten years ago heaven forbid twenty years ago pace change certainly quickened iterations faster competitive pressures higher customer expectations rising still pretty bad though either curse opportunity depending sit want look