yesterday i thinking complexity software systems i kind aha moment occurred me programmer hours time spent product development wasted know something like experts say features software system typically never used another rarely used means half code written product seldom ever actually executes irony think mindblowing software companies asking employees turn pcs night save dollars electricity wasting huge dumpster loads cash every day create code never execute worth creating excess code one could argue always chance someone need execute unused bits point time fact think many things life follow pattern seldom ever need need really need insurance example go life uninsured think never experience disaster unused software features like health insurance though like teacup soda straw insurance insurance granularity level teacups ridiculous aggregate could get quite expensive kind situation lot large expensive software systems fair number popular desktop programs photoshop acrobat professional openoffice three pay huge excess features never use magic answer problem know features write obviously judgment call i think critical vendors need cut costs customers looking less expensive solutions problems try address problem meaningful fashion done least two things know formal requirements tend pretty much universally err side feature richness rather leanness important address problem early chain overspecify requirements software companies product managers others drive requirements need learn think terms core use cases stop catering every customer request specialized feature cost associated implementing even smallest new feature strive hit use case scenarios customer needs ca afford ignore software buyer stop writing gargantuan rfps figure core use cases wo know real world needs production year try anticipate every possible need advance insist full generality stick hard core business requirements odds getting right small enough another approach take insist modular design factor minority functionalities way easily added back later snap ins extra modules create framework create services compose application product managers quit listening every ridiculous feature request field drive needless features product one customer asked edge case supported make easy customers ses build share add ons instead infrequently executed baggage code costly everyone let stop demanding