top left original image top right image quantized bits color information per channel lower left bits color per channel lower right bits per channel turns surprisingly quick easy quantize colors image smaller number bits per channel standard bits red bits green bits blue loop pixels appropriate mask value mask value xfffff discards lower bits worth color information channel essentially leaving bits red green blue mask value xffeee keeps top bits channel mask xffccc retains bits color per channel obtain images shown i ran following script using various mask values aid imagemunger java app i gave code earlier imagemunger class simply opens image choice supply filepath command line argument runs javascript file choice second command line argument putting variables image panel scope runtime image variable reference bufferedimage object representing image panel variable reference jcomponent imagemunger draws image mask xffccc bits per channel xffeee bits per channel xfffff bits per channel var image getwidth var image getheight var pixels image getrgb null i len pixels length i len i pixels i mask image setrgb pixels panel updatepanel getrgb method bufferedimage fetches pixels image giant one dimensional array corresponding setimage method replaces pixels updatepanel method panel defined imagemunger java causes jcomponent refresh given javascript java surprised find performance exactly breakneck still pixels per millisecond thoughput terrible either might expect quantizing color info makes image easier compress original image png form occupies kbytes disk bit per channel version occupies k bit version k bit version little k