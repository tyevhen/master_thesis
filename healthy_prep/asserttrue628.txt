i spending time reading signals book getting real lot common sense advice keeping development projects track sampling bullet points i found particularly worthwhile explicitly define one point vision app app stand really start designing coding anything need know purpose product vision think big exist makes different similar products work large small worry size headline font week one need nail perfect shade green week two need move submit button three pixels right week three get stuff page use make sure works later adjust perfect find core market application focus solely signals calls hiring right customer customer always right truth sort right wrong app good news internet makes finding right people easier ever try please everyone wo please anyone scale later scaling problem yet got huge number people overloading system great nice problem truth overwhelming majority web apps never going reach stage even start get overloaded usually nothing issue time adjust respond problem plus real world data benchmarks launch use figure areas need addressed build half product half ass product beware everything kitchen sink approach web app development throw every decent idea comes along wind half assed version product really want build half product kicks ass stick truly essential good ideas tabled take whatever think product cut half pare features left essential ones essentials favorite answer question always matter statement embodies makes product great figuring matters leaving rest start time say yes feature adopting child take baby whole chain events design implementation testing etc feature stuck make feature work hard implemented make feature prove show survivor like fight club consider features willing stand porch three days waiting let start every new feature request comes meets listen initial response request feature keeps coming back know time take deeper look start considering feature real expose price new features example lookout feature loops i features lead features avoid preferences preferences way avoid making tough decisions instead using expertise choose best path leaving hands customers may seem like favor making busy work likely busy enough customers preference screens endless amount options headache blessing customers think every nitty gritty detail put burden responsibility ask people want software surveys research questions centered around people want product feature think missing could add one thing would would make product useful side coin ask people want could remove one feature would use gets way answer sometimes biggest favor customers leave something book see free online edition