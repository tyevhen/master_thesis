days ago i showed implement java paint way lets vary paint appearance according position point onscreen words treating paint procedural texture turns pretty straightforward implementing paint interface means providing implementation paint one required method createcontext public paintcontext createcontextcolormodel cm rectangle devicebounds rectangled userbounds affinetransform xform renderinghints hints formal parameters hints ignored note createcontextmethod returns java paintcontext object paintcontext interface implement well turns real action occurs methods paintcontext interface include public void dispose public colormodel getcolormodel public raster getrasterint dispose method releases resources allocated class many cases allocate nothing thus dispose method empty getcolormodel method cases one liner simply returns colormodel getrgbdefault things get interesting getraster opportunity set pixel values pixels raster based values one widely used procedural textures ken perlin famous noise algorithm might exaggeration much say majority cgi world interesting textures start least way use perlin noise one could say texture launched thousand oscars perlin academy award technical achievement academy motion picture arts sciences noise algorithm foundationally important cinematic cgi turns pretty easy implement perlin noise custom paint see lines code shown note order use code need class improvednoise java nifty reference implementation perlin noise provided ken perlin scroll code sideways see lines wrap perlinpaint kas thomas february public domain asserttrue blogspot demonstration custom java paint implementation paint uses two dimensional perlin noise texture based perlin improved reference implmentation see improvednoise java mrl nyu edu perlin noise thanks david jones code monk idea import java color import java paint import java paintcontext import java rectangle import java renderinghints import java geom affinetransform import java geom rectangled import java image colormodel import java image raster import java image writableraster class perlinpaint implements paint static final affinetransform defaultxform affinetransform getscaleinstance colors stored component form private float colora private float colorb private affinetransform transform public perlinpaintcolor color colora getcomponentsnull colorb getcomponentsnull transform defaultxform public perlinpaintcolor color affinetransform transformarg colora getcomponentsnull colorb getcomponentsnull transform transformarg public paintcontext createcontextcolormodel cm rectangle devicebounds rectangled userbounds affinetransform transform renderinghints hints return new contextcm transform public gettransparency return java transparency opaque class context implements paintcontext public contextcolormodel cm affinetransform transform public void dispose public colormodel getcolormodel return colormodel getrgbdefault getraster makes heavy use enclosing noisepaint instance public raster getrasterint xoffset yoffset writableraster raster getcolormodel createcompatiblewritableraster float color new float treat point perlin space float p xoffset yoffset transform transformp p float floatimprovednoise noise p p improvednoise noise returns float range whereas want float range color lerp colora colorb assume default rgb model bits per band color xff raster setpixel color return raster float lerp float float float return code self explanatory two constructors allow pick primary secondary colors texture one includes affinetransform whereas use constructor transform scale rotate etc perlin noise suit needs achieve cloudy look text top post uses scaling factor per script note run following script helps copy imagemunger tiny java app i wrote couple weeks ago imagemunger simple command line application pass two command line arguments namely file path pointing jpeg image file file path pointing javascript file imagemunger opens image jframe executes script meanwhile also puts two global variables scope script use image reference bufferedimage object panel reference jcomponent paints image sure jdk perlintext js kas thomas february public domain run file using imagemunger asserttrue blogspot simple java class running scripts gd image creategraphics rh java renderinghints hint new rh rh key text antialiasing rh value text antialias gd setrenderinghints hint transform gd gettransform getscaleinstance perlinpaint new packages perlinpaint java color blue java color white transform gd setpaint perlinpaint gd setfont new java font times new roman java font bold gd drawstring perlin gd drawstring noise panel updatepanel future projects implement perlin turbulence brownian noise custom paints implement bump map faux shaded version perlinpaint