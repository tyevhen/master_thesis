somewhat blurry image left sharpened produce image right using two dozen lines javascript code shown run conjunction imagemunger java app see text details contrast adjustment sharpening image thought exercise weak signal amplification generally means making differences neighboring pixels noticeable brute force analysis pixels course area operators kernel based convolutions clean way go convolution kernel matrix numbers used coefficients numerical operations pixels suppose kernel looks like loop pixels image would given pixel multiply pixel zero multiply pixel directly given pixel also multiply pixels left right pixel question multiply one pixels o'clock o'clock o'clock o'clock pixel question add numeric values together divide kernel size result new pixel value given pixel repeat pixel image example cited kernel etc would end smoothing blurring image essence replacing given pixel value weighted average surrounding pixel values sharpen image want use kernel takes differences pixels example kernel would achieve differencing center pixel pixels immediately north south east west would cause fairly harsh small radius high frequency sharpening image features turns java good support kernel based convolutions images using java image kernel java image convolveop takes lines javascript run convolution kernel jpeg image achieve sharpening image see code listing days ago i posted code small java app called imagemunger opens image choice runs script may want use app run following code kernel function normalizekernel var i i length i i var i i length i i return kernel normalizekernel kernel k new java image kernel kernel convolver new java image convolveop k java image convolveop edge op null target new java image bufferedimage image getwidth image getheight image gettype target creategraphics drawimage image null dispose image convolver filter target image panel updatepanel recall imagemunger app i talked days ago exports couple global variables javascript context namely image handle bufferedimage panel reference jcomponent image displayed aid globals appropriate calls jre methods easy run convolution easy fast expect process around thousand pixels per millisecond future projects programmatically generate initialize large kernels slider based ui performs interesting initializations kernel values kernel based sharpening tends preferentially add high frequencies image problematic images lots areas high frequency noise create smart sharpen algorithm dynamically tunes frequency sharpening kernel values according natural humm natural frequencies area areas sharpened side benefit foregoing create sharpening algorithm wo sharpen jpeg artifacts