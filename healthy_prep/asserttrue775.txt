i lot depth product evaluations day job mostly involving content management systems ranging open source systems boutique k solutions k suites sometimes also involving enterprise search products number digital asset management offerings many products i call one size fits none products come lot functionality box almost licensee simply reskin login page use product production unmodified complex organizations complex needs met building custom applications extending product existing applications level something like oracle ucm documentum apis become important good api becomes value multiplier leading directly better roi bad api becomes productivity sink vendor lock mechanism leading missed rollout dates ongoing pain ownership rogaine addiction reasons sheer morbid curiosity i always try get look vendor apis process evaluating product i recommend involved product selection effort get input developers evaluate apis part product evaluation process wait deal inked find whether product apis problematic rollout schedule might undergo serious changes since almost serious system rollout involves significant amount custom development best chance rolling ahead time budget go product either already implements features need likely powerful easy learn apis span wide range abstraction levels lowest level want direct programmatic access system services ability create extend core objects higher level want access business objects data sources component libraries either low level language scripting language preferably combination server side client side apis ajax enabled highest level want able get services via rest calls soap depends sophisticated requirements around security fault handling policies mediation nodes complex payload bundles etc need use jms say instead soap based web services api important terribly performant way go soap services used overnight batch processing long running bpm processes performance penalty probably wo matter want avoid using soap fetch stock quotes similar sorts things soap overhead worth potential rapid application development important imho product evaluating level scripting support words want forced use java every little thing product support standard languages opposed proprietary one languages day age excuse making customers learn proprietary language proprietariness surface language level syntax start investing writing code proprietary language entering wonderful land vendor lock beware i find product standards driven well designed apis developers need take classroom training order productive go work immediately least day good litmus test i think best coders take days classroom training order get beyond hello world look long hard product architecture apis another danger sign proprietary development tooling impossible develop custom component without special purpose designed vendor supplied ide think eclipse visual studio plug ins fine problem potentially problematic vendor created one ide use order custom development standards driven product seldom forces use special tools one benefits standards ideally product highest level apis able support many common use case needs example basic crud operations create read update delete possible using apis live higher level raw java granted wo always possible many scenarios safe transactional access data requires custom written compiled code point drop java get stock quote simple things easy look api features favor declarative versus imperative style programming configuration settings hard coded values things change often xml text based file code raw java change color ui component lot say subject apis i touched high level points kind basics need pay attention evaluating complex product like cms dam system easy falsely comforted vendor claim extensive web services support ajax support comprehensive java apis every middleware solution apis question many hours days weeks take become productive really things need