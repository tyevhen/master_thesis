i mentioned apis critical component large enterprise software offerings largest vendors realize treat api design seriously vendors course actually productize apis via sdks installers release notes etc often case product well defined plug architecture example many systems multiple apis days accommodate various abstraction levels programmatic vs soap example well expose different kinds functionality offered different subsystems also unfortunately common situation vendor chosen expose programmatic functionality proprietary non standard scripting language becomes api well thing middleware api maturity model design intention would surely one principal stages apis run spectrum fully project managed development cycle complete requirements gathering design docs specifications dev qa testing usability testing documentation etc put together ad hoc basis developers happen time quite apis i would call accidental built organically period years intentionally designed rather structure shadows product existing codebase thus api inherits product development processes preceded rather arisen well defined design process ideally way around anything api precede software least however apis need intentionally designed much riding allow happen course api place hard redesign refactor legacy classes follow legacy patterns left place backward compatibility reasons lest changes break customer code new classes methods get added removed api added onto incrementally period many years may accumulated staggering design debt point reducing debt becomes prohibitively painful point passed make sense try refactor api unless product rewritten alas software world magic bailout help design debt advice one software vendors built existing apis ad hoc fashion period many years might good time assess state apis nothing else ask customers partners maybe even engineers whether apis job well could consider usability studies apis promote use accepted design patterns classes methods self explanatory could experienced developers need go classroom training week order become productive competent developer become productive reasonably short period time take stab coming metrics score apis usability fitness purpose put together business case much extra roi would customers realize apis even say usable much roi would company realize bottom line underestimate importance good apis assume product design good apis take care like saying airplane design good enough fly almost true problem word almost