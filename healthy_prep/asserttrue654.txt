top left source image jpeg top right image collage voronoi cells lower left cells lower right cells embossed click image see larger version voronoi tessellation factoring space polygonal regions enclose points one point per region way boundary two adjoining regions runs perpendicular imaginary line connecting nearest two points also midway two points simplest case set points voronoi sites defines corresponding number cells vs given cell consisting points closer site segments voronoi diagram points plane equidistant two nearest sites look points diagram see imaginary line connecting two neighboring points bisected right angle cell boundary cell boundary exactly midway points makes voronoi cell voronoi cell voronoi diagrams named russian mathematician georgy fedoseevich voronoi use dates back hundreds years descartes already familiar british physician john snow supposedly used voronoi diagram illustrate majority people died soho cholera epidemic lived closer infected broad street pump water pump dual graph voronoi diagram corresponds delaunay triangulation set points delaunay interesting construction right save another day suffice say delaunay offers way taking field coplanar points making field triangles composed way circumcircle inscribed given triangle encloses points voronoi tessellated forms tend aesthetically pleasing tessellation done produce cells areas high detail fewer cells low detail areas although always fast tessellation point field voronoi cells generally takes depending algorithm either squared log time meaning quite slow number points large fortunately take advantage space filling trick make whole process occur linear time i time order practice see algorithm works imagine field points let point magically become soap bubble grow bubble slowly two bubbles meet walls fuse together one flat section joins two boundary perpendicular imaginary line connecting centers bubbles seen two bubbles stuck together know i mean flat side bubble join together continue grow bubbles curved edges flat walls approach use take field points dilate grow directions become regions adjoin regions grow speed natural boundaries form boundaries define voronoi cells redefine image series points easy take random samples image actually visually pleasing result want random samples want take samples areas high detail fewer samples areas gradual color change easy enough algorithm walks image looking much pixel differs pixels around accumulate variance running average number exceeds certain arbitrary threshold take sample otherwise set visited pixels white javascript shows done loadsamples method walks image taking samples pixel values frequent samples rapidly fluctuating areas less frequent samples areas little variation field samples captured call spacefill method dilates points growing north south east west directions image space filled i frequent checks see done filling case break loop generally average cell size small enough give pleasing visual appearance whole image filled iterations smaller numerous cells filled quickly hence fewer iterations cells sounds counterintuitive first note run script may want use little imagemunger app i gave code previous post imagemunger open image run script along way puts image panel globals scope runtime see previous post details unaccountably i found code runs much faster using separate mozilla rhino js jar using jdk onboard script engine i say much faster i talking difference six seconds two minutes i try troubleshoot voronoi js kas thomas february public domain loop pixels image sample taking samples areas detail fewer samples areas little variation function loadsamples pixels rasterwidth threshold length pixels length accumulatederror thispixel north south east west ave samples new array pixels length var i i samples length i samples i var i i length i thispixel getpixelstrength pixels i north i rasterwidth getpixelstrength pixels i rasterwidth south i i rasterwidth getpixelstrength pixels i rasterwidth east i length getpixelstrength pixels i west i getpixelstrength pixels i ave north south east west math random accumulatederror ave thispixel accumulatederror threshold samples i pixels i accumulatederror else samples i xffffff return samples get green value scale function getpixelstrength p value p return value var image getwidth var image getheight var pixels image getrgb null sensitivity var newpixels loadsamples pixels sensitivity starting field points grow points evenly regions touch function spacefill pixels limit width var i iterate sample points dilate i i limit i var fillcount var k k pixels length k fillcount fillleft k pixels fillcount done filling bail break var k width k pixels length k fillcount fillup k width pixels fillcount break var k pixels length k k fillcount fillright k pixels fillcount break var k pixels length width k k fillcount filldown k width pixels fillcount break return i dilation functions function fillright i pixels pixels i xffffff xffffff pixels i pixels i return return function filllefti pixels pixels i xffffff xffffff pixels i pixels i return return function fillupi width pixels pixels i width xffffff xffffff pixels i width pixels i return return function filldowni width pixels pixels i width xffffff xffffff pixels i width pixels i return return optional function reporting purposes function howmanysamples pixels var i i pixels length i pixels i xffffff java lang system println samples samplecount howmanysamples newpixels var iterations spacefill newpixels java lang system println image filled iterations iterations image setrgb newpixels panel updatepanel draw get voronoi cells finer granularity resolution decrease value sensitivity constant value around yield point field density around percent words point samples per pixels get half many samples double sensitivity value