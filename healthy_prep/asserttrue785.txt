bruce eckel thinking java interesting post positive legacy java i sucker articles talk java legacy languages one notable fact comes true authority eckel standards committee years saw language design decisions take place first hand odd comments mostly lengthy mostly astute non emotional post provoked eckel post akin short eulogy i wish much longer fact eckel written numerous article books blogs past five six years outlining weaknesses large small java hard find read subject java far dead course much like cobol live eventually becoming something arcane specialty language mostly taught universities java biggest failings maybe important constructive ask biggest successes me java major disruptive effect arrived mid due game changing notion running virtualized machine idea cleanly separating language underlying machine dependencies huge advance sum importance java language platform second pivotally important aspect java design facilitated programming large package mechanism orientation toward safe reuse assurance common stable secure platform independent process space run jvm allowed teams programmers work independently produce large applications could take advantage huge advances machine design per moore law occurred throughout without frankly java would failed anything curiosity supporting programming large java made possible huge middleware industry see around today certainly would middleware industry without java would looked much different come much different set problems would even rube goldbergish quality java popularized notion application server landmark development changed software industry another outcome java notion design patterns complexity large systems made possible java demanded new type best practices knowledge around construction orchestrated systems tm owe lot java clearly sheer cost using java smaller scale projects driving creation new lighter weight languages frameworks offer better impedance match agile working styles going forward simply wo economical use java kinds development industry quite figured yet best technologies replacing java various types development makes things interesting right economic downturns like one tend drive intense competition intense competition breeds innovation hence whatever next big disruption programming turns probably come sooner rather later one thing sure software development business cling old ways development also get carried away thinking something like scrum going bandaid fixes agility problems may turn main problem java keep open mind try new things ready next disruption arrives may find without chair music stops