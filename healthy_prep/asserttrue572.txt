i came kind neat trick i like share canvas programmer listen might get kick know loading images canvas fiddling pixels using canvas api code load scripts images server security reasons problem hard core geeks among course many web developers keep local instance apache web server running background occasions adobe employee i fortunate able run adobe wem aka day cq machine overall sucks i like able fiddle image taken website i choose time i want without run web server local machine i done create chrome extension comes action whenever browser pointed url ends png jpg jpeg instant image question loads extension puts canvas element renders exposes context scripts work demo purposes i included code making gamma adjustments image via canvas api calls i talk later code chrome extension shown use copy paste code new file call brightnesstest user js actually call whatever want sure name ends user js save file text convenient folder launch chrome i testing chrome extension greasemonkey compatible i tested firefox use control bring file open dialog navigate file saved open notice bottom chrome window status warning saying extensions harm loved ones etc two buttons continue discard click continue confirm installation dialog pops click install button extension installed running test extension navigating goo gl uqpra penguin image shown screenshots please try small image like penguin first performance reasons note due security restrictions ca load images disk file scheme url https allowed png jpg web work image loads see small slider underneath input element using obsolete version chrome might see text box instead move slider right effect gamma adjustment image tending make image lighter move slider left darken image actual image processing takes place lift finger mouse slider slides around mouseup occurs program logic kicks image repaints see gamma curve appear slider examples code chrome extension userscript name imagebrightnesstool namespace ktbrightnesstool description canvas image brightness tool include userscript demo script kas thomas use risk stuff loadcode injected script element page function loadcode window lut null ken perlin bias function window bias function return math powa math logb math log window createlut function biasvalue create global lookup table colors lut createbiascolortable biasvalue window createbiascolortable function var table new array var i i i table i applybias i return table window applybias function colorvalue var normalizedcolorvalue colorvalue var biasedvalue bias normalizedcolorvalue return math round biasedvalue window transformimage function var canvasdata offscreencontext getimagedatax var limit i i limit i canvasdata data i lut canvasdata data i context putimagedata canvasdata get offscreen drawing context image window getoffscreencontext function var offscreencanvas document createelement canvas offscreencanvas width offscreencanvas height return offscreencanvas getcontext window getcharturl function var url chart apis google chart url chf bg lg efefef bbbbbb chs url cht lc chco ff chds chd url lut join url chls chm efefef return url setupglobals function window canvas document getelementbyid mycanvas window context canvas getcontext var imagedata context getimagedata canvas width canvas height window offscreencontext getoffscreencontext canvas width canvas height window offscreencontext putimagedata imagedata setupglobals actually call end loadcode main function main really image url var ext location href split pop ext match jpg jpeg png null return ditch original image img document getelementsbytagname img img parentnode removechildimg put scripts page scope script elem id mycode eval event later var code document createelement script code setattribute id mycode document body appendchildcode code innerhtml loadcode tostring set canvas canvas document createelement canvas canvas setattribute id mycanvas document body appendchild canvas context canvas getcontext image new image image onload function canvas width image width canvas height image height context drawimageimage canvas width canvas height line must come onload image src location href createsliderui create slider ui creategooglechartui create chart ui function creategooglechartui set iframe google chart var container document createelement div var iframe document createelement iframe iframe setattribute id iframe iframe setattribute style padding left px iframe setattribute frameborder iframe setattribute border iframe setattribute width iframe setattribute height container appendchildiframe document body appendchildcontainer create slider ui function createsliderui var div document body appendchild document createelement div var slider document createelement input slider setattribute type range slider setattribute min slider setattribute max slider setattribute value slider setattribute step code loaded already load one time update slider range indicator create color lookup table var actioncode typeof codeloaded 'undefined codeloaded code document getelementbyid mycode innerhtml evalcode loadcode document getelementbyid range innerhtml stringthis value substring createlut numberdocument getelementbyid'range innerhtml slider setattribute onchange actioncode following operation timeconsuming attach onchange event attach onmouseup instead slider setattribute onmouseup document getelementbyid'iframe src getcharturl transformimage canvas width canvas height div appendchild slider div innerhtml span id range span code little less elegant chrome would firefox unlike chrome supports ex exposes usable unsafewindow object code however illustrate number useful techniques wit swap img canvas image draw offscreen context inject script code page scope extension gmonkey scope use slider input element change gamma colloquially somewhat incorrectly brightness image pixels via color lookup table use ken perlin bias function remap pixel values range display resulting gamma curve actually bias curve google chart real time fair amount stuff actually discussing could take long time code long though able grok quick read important concept image processing standpoint notion remapping pixel values using pre calculated lookup table naive slow approach would simply parse pixels separate bias call red green blue value image would mean calling bias hundreds thousands times maybe millions times sizable image instead create table array size remap values look appropriate substitution value color pixel rather laboriously calling bias color pixel first time encountered ken perlin bias function actually important class function understand fundamentally remaps unit interval real numbers range bias value real numbers map original values bias value less remapping swayed manner shown screenshot right bias value greater bends curve exactly opposite direction case always ends mapping zero always maps one matter bias knob set function sense nicely normalized bias technically quite bit different true gamma adjustment gamma curves come different formula desirable property mapping onto unit interval behaving intuitively respect midpoint nevertheless gamma familiar graphic artists i abused word throughout post even headline shame me performance bias code surprisingly poor particular usage chrome extension dell laptop i see processing rate pixels per second bias lookup code running normal web page chrome extension injects page scope goes ten times faster yes order magnitude faster native web page i link image transformation call onchange handler image even large one updates continuously real time drag slider fast code projects particular context chrome extension seems dreadfully slow i hooked main processing routine onmouseup handler slider otherwise slider sticks anyway i hope techniques post whetted appetite canvas explorations great canvas demos i delving canvas scripting techniques distant future happy pixel poking