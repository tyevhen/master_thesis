good coders code great ones reuse anyone disagree i disagree principle reinventing something invented old obvious obviously useful one would seriously dispute much worth disputing though value code reuse percentage metric degree code reusability actually brings economies software business i would argue economies largely nonexistent generally high cost achieving reusability first place failure depreciate investments reusability time reusing code product written support file format say code still product legacy reasons really count reuse reuse weighted according whether code actually gets executed build bad code flabby code spaghetti code stuff may contain unreachable deprecated methods etc count reusability go back right build bad code achieved reusability go back clean code killed reuse metrics may well score longterm roi win many problems reuse percentage metric i wo litigate case fully instead ask refer paper lim blog dennis forbes blog carl lewis starters tracz early advocate reuse ironically pointed software reuse myths revisited reusable code costs around develop code designed reuse mind estimate derived probably factor three four maybe ten java moot case given cost producing code reality comparatively small part overall cost producing marketing commercial software i really saying potential cost savings proper motivation reuse significant cost savings costs develop reusable code payoffs mitigated longterm maintenance costs associated larger code base someone inevitably argue although may end classes interfaces design reusability code ultimately readable i dispute code becomes complex generally necessarily true becomes readable jmenu really need methods got way someone lazily decided use inheritance code reuse mechanism instead designing jmenu needs could argue well ancestor classes already written never written reuse many fallacies argument hard know begin jmenu bottom classes deep inheritance chain odds nothing chain ever rewritten future small touching code chain entails risk breakage risk subclasses kind thing keeps half bangalore business regression tests runtime carrying around baggage odd methods need footprint software disk memory bigger performance affected garbage collection affected i suggesting rewrite jmenu i saying sun going write something like swing clean sheet paper common sense mind rather taking inherit world approach reusability rest assured i write code i try sheer laziness make many lines classes methods reusable makes sense i guess point sometimes make sense go way write highly reusable code sometimes important something small streamlined works purpose built well fine ca reason fine appropriate situation mean abandon good programming practices mean write poorly structured code means write much code need resist temptation overfactor unfortunately latter quite hard especially steeped java arts place world silverware place plastic spoons yes recycle plastic spoons gosh sakes silverware expensive let accumulate needlessly