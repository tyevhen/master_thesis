the other night , i was looking at the jsr swing application framework prototype implementation , which is according to the landing page a small set of java classes that simplify building desktop applications what made me smile is the statement on that same landing page the intended audience for this snapshot is experienced swing developers with a moderately high tolerance for pain when i tweeted this , gil hova tweeted back wait there are swing developers with low tolerances for pain ? i laughed so hard i almost blew coffee out my nose now that 's taking java seriously before going any further , i should tell you that the swing application framework appears to be dead the jsr is marked inactive , with the most recent build carrying a date of october it was supposed to go into java se but it now seems to be in a kind of limbo but in case you were wondering what , exactly , the swing app framework is designed to let you do , here 's the hello world example cited by the creators public class applicationexample extends application jframe mainframe null override protected void startupstring ignoreargs jlabel label new jlabel hello world , jlabel center label setfontnew font lucidasans , font plain , mainframe new jframe hello world mainframe addlabel , borderlayout center mainframe addwindowlistenernew mainframelistener mainframe setdefaultcloseoperationjframe do nothing on close mainframe pack mainframe setlocationrelativetonull center the window mainframe setvisibletrue private class mainframelistener extends windowadapter public void windowclosingwindowevent e exite public static void mainstring args launchapplicationexample class , args i'm sure there 's a lot of goodness packed away somewhere in the bowels of the saf api , but it sure is n't showing up in this hello world code if you run the foregoing code , you get yes , it 's an ugly large type edition of browser javascript 's window alert except it takes lines of code instead of one this snippet illustrates a scant handful of the many annoyances that make swing programming feel so much like death by a thousand paper cuts for example , it shows the repetitive boilerplate code swing programmers are forced to write every time something as common as a jframe is needed the setlocationrelativetonull , setvisibletrue , the ever ridiculous pack , all are needless mumbo jumbo get rid of them ! roll them up out of view make them default behaviors if i want to override these things , let me but nine times out of ten , when i create a jframe , i do , in fact , want it to be centered onscreen i want it to be visible i want it to go away when dismissed and be garbage collected and i do n't want to have to recite pack ever again in my lifetime a library that makes programmers write boilerplate is lame it violates a basic principle of good api design , which is that any code that can be hidden from the programmer should be hidden see slide of joshua bloch 's excellent slideshow not giving things reasonable default values is , likewise , a sin there 's something else here that rubs me the wrong way , which is that if you 're creating a new api or framework , in this case to supplement an existing api , it seems to me you should n't use that as an opportunity to introduce additional language syntax in other words , do n't introduce annotations if the underlying api does n't use them keep it simple streamline simplify but enough ranting on balance , i think the swing app framework is a good idea and adds value , and i think something like it should go into java se , because although it does n't make writing jframe code any less annoying , it does provide a host of application services that would otherwise require swing programmers write tons and tons of really tedious code anything that reduces that tonnage is good , i say