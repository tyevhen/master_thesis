i 've been thinking about what one question i would ask a job candidate for an r d job if i could ask only one question this assumes i 've already asked my favorite high level question , which i discussed in yesterday 's post most good r d job questions , of course , are open ended and have no single right answer they 're intended as a starting point for further discussion , and a gateway to discovering the reasoning process of the candidate one of the better such questions i 've heard during an interview came when i applied for a job at a well known search company one of the five people who interviewed me asked explain how you would develop a frequency sorted list of the ten thousand most used words in the english language this was an outstanding question on many levels and led to a very lively hour long discussion but i 'll save that for another day to me , if i'm interviewing someone who is going to be involved in writing code , and i can only ask one question in the course of an interview , it would be explain what 'bad code' means to you if the person starts going down the road of see what kind of warnings the compiler gives you , run it through lint , etc , i would steer the person back on track with aside from that , what would you do if i gave you , say , a couple thousand lines of someone else 's code to look at ? how would you judge it ? what sorts of things would make the code 'good' or 'bad' in your eyes ? assume that the code compiles and actually works if the talk turns immediately to formatting issues , that 's not good presence or absence of comments starts to be relevant coding conventions around the naming of variables and such yeah yeah yeah that 's good what else ? what about the factoring of methods ? is the code overfactored ? underfactored ? factored along the wrong lines ? how can you tell ? this leads also to the question of how long is too long , for a class or method ? what about evidence of design patterns ? does it look like the person who wrote the code does n't know about things like observer , visitor , and decorator patterns ? does the code follow any antipatterns ? is it just plain hard to follow because of methods trying to do too much , overusage of custom exceptions , overuse of cryptic parent class methods , constructors or method declarations with million formal parameters , etc ? what about performance ? does it look like the code might be slow ? why ? could the author have perhaps designated more things final ? is code repeated anywhere ? is the code likely to create garbage collection concerns ? memory leakage ? concurrency issues ? this list goes on and on you get the idea special extra credit points go to the candidate who eventually asks larger questions , like was this code written to any particular api ? is it meant to be reusable ? is it part of a library versus plain old application code ? how will people be using this code ? is it meant to have a long lifetime , or will this code be revisited a lot or possibly extended a lot ? i'm sure you probably have favorite r d questions of your own perhaps ones you 've been asked in interviews if so , please leave a comment i 'd like to see what you 've got