a classic example of rampant feature excess and poor ui design eclipse as you know if you 've been following my previous posts , i 've been thinking a lot , lately , about feature richness in software what does it mean , to the user , to have a feature rich product ? when are additional features really needed ? is it possible to have too many features ? is there a sweet spot for feature richness or a point of diminishing return ? is it possible to build too many features into a product , or is that question best recast in terms of how features are exposed via the ui or perhaps the api ? fair warning i offer many questions , but few answers my gut tells me that more often than not , feature richness is a curse , not a blessing an embarrassment , not something for marketing to be proud of when a customer sits down to use a product and he or she notices an excess of functionality , it conveys an impression of waste it suggests that the maker of the product willingly tolerates excess and does n't understand the less is more aesthetic from a purely economic point of view , a customer who sees an excess of functionality wonders why he is being forced to spend money on things he might never need the customer might also get the impression without even trying the product ! that the product is hard to learn for these and other reasons , people involved in software design should be asking themselves not how feature rich a product should be , but how feature spare does anybody , at this point , seriously question that it is more important for an app to do a small number of mission critical things in a superior fashion than to do a larger number of non mission critical things in acceptable fashion ? i have two word processing applications that i use a lot one is openoffice writer the other is wordpad the former is battlestar galactica , the latter sputnik ironically , i often find myself using wordpad even though i have a much more capable word processor at my disposal i use wordpad to capture side thoughts and sudden inspirations that i know i 'll come back to later , when i'm further along in the main document these side thoughts and incidental epiphanies are sometimes the most creative parts of whatever it is i'm writing it 's ironic that i will use the most primitive tool available preferentially , over a much more powerful tool when capturing my most creative output i do n't think i'm alone in this i'm sure a lot of programmers , for example , have had the experience of writing a java class or javascript routine in notepad or the equivalent first , only to copy paste the code into eclipse or some other heavyweight ide later why is this ? why turn to a primitive application first , when capturing fresh ideas and inspired content ? speaking for myself , part of it is that when i'm having a peak creative moment , i do n't have time to sit through through the ten to thirty seconds it might take to load openoffice , eclipse , or photoshop creative moments have very short shelf life any speed bumps on the way to implementing a new idea are creativity killers an app that loads in one second or less as wordpad does is priceless but that 's not the whole explanation , because quite often i 'll turn to wordpad even when openoffice writer is already running ! i think that 's because when i'm having a peak creative moment , i do n't want any distractions i want to work close to the document , with no extraneous features distracting me or slowing me down in any way whatsoever i do n't want to be tempted to choose a different font , reset margins and tabs , redo paragraph formatting , worry about spellcheck , etc , while i'm capturing my most important thoughts just knowing that extraneous features exist slows me down also , i find i often need more than one clipboard instance i 'll often open multiple wordpad windows just to cache certain text passages until i can figure out whether or not i want to use them and in what order in my main document i'm sure there are other , deeper reasons why i turn to lightweight programs before using supposedly superior heavyweight alternatives the fact that i ca n't articulate all the reasons tells me the reasons probably run quite deep software makers , take note i 'll say it again an application that has a large excess of features is a liability , both to the customer and the company that makes the software the larger the number of things an app is capable of doing , the more likely it is the user will be frustrated with program load time feel intimidated by the product need to consult documentation call the help desk spend money on third party books and training forget how certain features work and spend time re learning how to use those features feel pain at upgrade time , when menus and palettes and dialogs and prefs and workflows are improved over the last version of the software , requiring yet more relearning bottom line , when it comes to feature richness , more is not better more is less sometimes a lot less