i 've been spending some time reading the signals book getting real it has a lot of common sense advice for keeping development projects on track here 's a sampling of some bullet points that i found particularly worthwhile explicitly define the one point vision for your app what does your app stand for ? what 's it really all about ? before you start designing or coding anything you need to know the purpose of your product the vision think big why does it exist ? what makes it different than other similar products ? work from large to small do n't worry about the size of your headline font in week one you do n't need to nail that perfect shade of green in week two you do n't need to move that submit button three pixels to the right in week three just get the stuff on the page for now then use it make sure it works later on you can adjust and perfect it find the core market for your application and focus solely on that signals calls this hiring the right customer the customer is not always right the truth is you have to sort out who 's right and who 's wrong for your app the good news is that the internet makes finding the right people easier than ever if you try to please everyone , you wo n't please anyone scale later you do n't have a scaling problem yet if you 've got a huge number of people overloading your system , then great that 's a nice problem to have the truth is the overwhelming majority of web apps are never going to reach that stage and even if you do start to get overloaded it 's usually not an all or nothing issue you 'll have time to adjust and respond to the problem plus , you 'll have more real world data and benchmarks after you launch which you can use to figure out the areas that need to be addressed build half a product , not a half ass product beware of the everything but the kitchen sink approach to web app development throw in every decent idea that comes along and you 'll just wind up with a half assed version of your product what you really want to do is build half a product that kicks ass stick to what 's truly essential good ideas can be tabled take whatever you think your product should be and cut it in half pare features down until you 're left with only the most essential ones then do it again essentials only our favorite answer to the why did n't you do this or why did n't you do that ? question is always because it just does n't matter that statement embodies what makes a product great figuring out what matters and leaving out the rest start with no each time you say yes to a feature , you 're adopting a child you have to take your baby through a whole chain of events e g design , implementation , testing , etc and once that feature 's out there , you 're stuck with it make each feature work hard to be implemented make each feature prove itself and show that it 's a survivor it 's like fight club you should only consider features if they 're willing to stand on the porch for three days waiting to be let in that 's why you start with no every new feature request that comes to us or from us meets a no we listen but do n't act the initial response is not now if a request for a feature keeps coming back , that 's when we know it 's time to take a deeper look then , and only then , do we start considering the feature for real expose the price of new features for example , be on the lookout for feature loops i e features that lead to more features avoid preferences preferences are a way to avoid making tough decisions instead of using your expertise to choose the best path , you 're leaving it in the hands of customers it may seem like you 're doing them a favor but you 're just making busy work for them and it 's likely they 're busy enough for customers , preference screens with an endless amount of options are a headache , not a blessing customers should n't have to think about every nitty gritty detail do n't put that burden on them when it should be your responsibility ask people what they do n't want most software surveys and research questions are centered around what people want in a product what feature do you think is missing ? if you could add just one thing , what would it be ? what would make this product more useful for you ? what about the other side of the coin ? why not ask people what they do n't want ? if you could remove one feature , what would it be ? what do n't you use ? what gets in your way the most ? more is n't the answer sometimes the biggest favor you can do for customers is to leave something out for more of the book , see the free online edition here