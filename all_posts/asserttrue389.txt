yesterday i talked about my favorite technique of crunching data in the browser generally , i try to get my data in tab delimited form and then save it in a plain old text file i open the text file in chrome , use control shift j to pop open the console window , then load the data into a variable with alldata document getelementsbytagname pre innerhtml what if your data is not tab delimited ? well , think about it this way all data is delimited the only question is what the delimitation scheme is and whether it 's consistent all the way through javascript offers many ways to parse data you 're limited only by your understanding of the data , and of javascript bottom line , all data can be parsed it 's a matter of finding patterns let 's go through a quick example using some bio data the other day i talked about pulling codon tables down from genomevolution org i eventually stuffed a bunch of data into a text file the data looked like this ccap ccgp cctp cccp cgar cggr cgtr cgcr caaq cagq cath cach ctal ctgl cttl ctcl gcaa gcga gcta gcca ggag gggg ggtg ggcg gaae gage gatd gacd gtav gtgv gttv gtcv acat acgt actt acct agar aggr agts agcs aaak aagk aatn aacn atai atgm atti atci tcas tcgs tcts tccs tga tggw tgtc tgcc taa tag taty tacy ttal ttgl tttf ttcf ccap ccgp cctp cccp cgar cggr cgtr cgcr caaq cagq cath cach ctal ctgl cttl ctcl gcaa gcga gcta gcca ggag gggg ggtg ggcg gaae gage gatd gacd gtav gtgv gttv gtcv acat acgt actt acct agar aggr agts agcs aaak aagk aatn aacn atai atgm atti atci tcas tcgs tcts tccs tga tggw tgtc tgcc taa tag taty tacy ttal ttgl tttf ttcf plus much more like the above lots and lots of codon tables for lots and lots of organisms how to parse it all ? since there 's a carriage return at the end of each table but not at the end of each line in the table , getting an array of tables just requires codontables allthetext split n if you 're not a biogeek , here 's a big chunk of molecular biology in a nutshell dna is a four letter language a , g , c , t for spelling three letter words called codons if you do the math , there are possible codons each codon corresponds to an amino acid of which there are in living organisms the fact that there are codons but only amino acids means some amino acids have more than one codon but also three of the codons have a special meaning the codons tag , tga , and taa are so called stop codons they do n't code for any amino acid instead they tell rna polymerase when to stop making protein the codon table for an organism tells you the usage frequency for each of the possible codons the frequencies as you can see above vary a lot , not only within a single codon table for a single organism but across organisms some organisms have dna that 's unusually high in g guanine and c cytosine those organisms tend , not surprisingly , to use codons containing mostly g and c other organisms , like c botulinum yes , that botulinum , have dna that contains hardly any g or c and hence use the codon aaa which stands for lysine a good deal more than , say , gcg alanine if we know as we do , from the above tables the frequencies of occurrence of codons that contain 'a' such as caa , cca , aaa , aat , aga , etc , then it 's a simple matter to sum all the 'a' frequencies to get the total frequency of occurrence of a in the organism 's dna or at least in the coding regions of its dna we can do that also for c , g , and t to get their frequencies here 's a routine that looks at a codon table 's entries and derives a , g , c , and t compositions for the dna function getbasecomposition table var codons table split parse table into individual codons freqs codons pop get rid of empty final item var bases new object bases a bases g bases t bases c function analyze item var percent item split s get that percentage var codon item substring , get the actual codon bases codon percent base bases codon percent base bases codon percent wobble base codons foreach analyze loop over all codons bases a normalize the frequencies bases g bases t bases c return bases the line codons table split chops the codon table up into a bunch of pieces that look like ccap that is a codon , followed by one letter amino acid abbreviation in parens , followed by a frequency number the character happens to be convenient to parse on , but the presence of a at the end of the table also means split creates an empty item at the end of the array , which we do n't want we get rid of the empty item with pop parsing ccap into a codon and a frequency number is easy to get the codon , take the first three characters of the string , by using item substring , to get the number at the end , just split at the space using item split s the bracketed on the end means give me the second item in the array that was created by split the first item in the array at index would of course be ccap note that we have to normalize frequencies divide by toward the end , because we 're looking at frequency percentages that add up to but we 're counting bases per frequency number because codons have bases each , hence if we do n't normalize , we 're going to end up with total base content instead of the internal method analyze is a callback we give it to the foreach method of the codons array in case you did n't realize it , javascript now has a built in foreach method as part of every array object , and most modern browsers support it if we run this code against the first codon table shown further above which happens to be for an organism named abiotrophia defectiva strain atcc , we get back an object with fields a , g , t , and c containing the overall frequencies of occurrence of those bases in a defectiva dna or at least the parts of its dna that code for protein , which is well over what i got in chrome 's console looked like this object a , g , t , c the g c percentage for this organism comes to or to me , what 's more interesting than the g c number is that no two base compositions match g does not equal c not even close , in fact and a does not equal t in theory , g should equal c and a t according to chargaff 's second parity rule , which applies to single stranded dna remember , that 's what we 're dealing with here ssdna we 're looking at codon values that correspond to sequences on the rna synonymous strand of the organism 's dna obviously , chargaff 's second parity rule does n't hold in this case , because g is almost twice c , and a is of t ! moreover , a g equals , meaning the purine content is according to chargaff 's second rule , purines and pyrimidines should be each that 's not the case here things get really fun when it comes time to graph the data you crunch in the console window if you 're thinking google charts , think again there 's a much easier and more powerful way to graph data and no , it does not involve excel i 'll tell you all about it in my next post