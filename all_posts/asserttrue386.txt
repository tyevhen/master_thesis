if you 've had problems with svg in blogger or any other web pages , here are some things i 've learned the hard way the test image below which you wo n't be able to see in internet exploder upgrade to a modern browser , please comes from inline svg markup , incidentally first , when you try to insert an svg image the usual way , by using the image insert feature , quite often svg is n't a recognized format blogger , for example , expects images to be gif , png , jpeg , etc if you try to place an svg image in your blog , the upload wo n't be accepted shame on google but that 's okay , because svg is just markup , right ? and you can put markup inline with your html using the edit raw html mode of the editor widget it turns out all browsers except internet exploder honor raw svg embedded inline in html for an example , see the source code for this page the above image was inlined but there 's a problem blogger 's editor widget , upon seeing any self closed tag that it does n't recognize , such as g , will try to convert it to g g even though self closing tags are perfectly legal , and blogger itself honors such examples as br what 's worse , though , is that if blogger encounters a run of self closing tags , such as use xlink href x y use xlink href x y use xlink href x y it will try to convert it to use xlink href x y use xlink href x y use xlink href x y use use use which is , of course , wrong , because this creates nested elements where no nesting existed before nine times out of ten , inlined svg just does n't render properly in blogger pages and usually , it 's because of the problem i just mentioned self closing tags bigtime fail the answer is to expand every self closed tag in your svg to formal end tag form which is impracticable to do by hand in anything but a trivially small svg file i took a crack at solving this problem using regular expressions the idea is to write a regex that matches self closing tags , then use the string replace method to fix everything it took me an hour of messing around to stumble onto a solution the code seems to work , although i ca n't guarantee it 's formally correct or will work in every single case the regular expression i came up with is var globalpattern a za z g this charming little monstrosity tries to match an angle bracket followed by an element name composed of any combination of letters and numbers and hyphens all legal in xml , followed by anything that 's not a forward slash or a closing angle bracket and then finally it looks for the closing bracket to apply this to an svg page that 's loaded in the browser , you have to get the raw source for the page , which is n't hard to do , programmatically , providing you know the following trick function getmarkup node return new xmlserializer serializetostring node pass document getelementsbytagname svg to this function and you 'll be just fine now you need a function that will transform your raw markup to formal closing tag form this is what i came up with function fixselfclosingtags markup var globalpattern a za z g var pattern a za z var count markup matchglobalpattern length forvar i i count i var len markup match pattern length markup markup replace pattern , markup matchpattern substring , len markup matchpattern return markup okay , so it is n't pretty it 's the best i could come up with that seems to work on short notice once you 've converted your svg to formal closing tag syntax , it can be inlined in a blogger or other web page , and it should render just fine too bad blogger does n't make it easier for you to use svg scalable vector graphics has been around for almost years it 's time for it to be granted first class web citizenship , do n't you think ?