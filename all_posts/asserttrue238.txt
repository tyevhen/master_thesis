why does it so often happen that the things you thought were going to be easy turn out to be hard , and the things you knew were going to be hard turn out to be easy ? case in point i wanted to get a bunch of rss feeds onto a news page at author zone com , and did see my previous post about the great free hungryfeed plugin for wordpress but the various feed items were not in date sorted order , because the individual feeds were added in no particular order and who knows which feed will update at which time anyway ? what to do what to do i thought it would be doable but hard to parse out the dates from the items manually with javascript , then sort the items , and redisplay them redisplay them means first you remove all the dom elements in question , then add them back to the page in sorted order fortunately , that turns out to be easy you can call remove on a node to vanish it from the page but if you capture a reference to the node before doing that , the node will still exist in memory after it 's been removed from the dom so you can then just add it back in to the page using appendchild on a given target node no problem the greater problem turned out to be how to get wordpress to accept javascript inside a page or a post turns out the rich text editor will stomp on embedded scripts pretty badly this is a known sore point for wordpress users and as with so many content management system problems involving dynamic page assembly , it turns out there 's a workaround , but it 's the kind of thing that 's not at all obvious and could drive you crazy for a solid day if you 're not working with a partner who already has hit such snags and found the cure the magic workaround is to , first , put your script in a file and place it somewhere on the site on a public url then reference that file from a script tag , and make your call to the file 's main method inside a commented out section of page so the rich text editor ignores it with cdata wrappering so the browser does n't parse it either , with appropriate js comments double slash so the js parser does n't get confused by the cdata directives like so script src http author zone com wp content uploads myscript js script script ! cdata ! reorderitems script i know , it seems weird as hell that the js parser does n't choke on the ! line apparently it treats it as an undefined quantity , but since you 're not using that undefined thing for anything it does n't trigger an exception but guess what ? it works ! that 's the main thing the garblesnarble works and perhaps because i pasted the above lines after the shortcodes in my wordpress content page , not in the head section of the page the call to reorderitems occurs after the dom is safely loaded , hence there 's no timing issue of woops ! i ca n't mess with the dom until after onload time with this magic incantation in place , my script finally worked and the rss feeds get date sorted in real time no matter which feed updates first i set hungryfeed 's cache timeout to seconds , so the feeds are pulled once an hour unfortunately , it means that once an hour some unlucky soul gets to be the first person to request a fresh version of the page with all updated rss feeds and there are feeds , so it 's a lot of feed slurping wait time up to seconds ugh ! it all happens on the server , though , with no ajax once the feeds update , the content is static for the next hour , and during that time , the author zone news page loads in about four seconds , which is tolerable if you 're a code geek and you want to see my code for date ordering a bunch of feeds , the lines of code are shown below the first function is admittedly fugly it hard parses a bit of feed text to get the date string on the end , which will be something like august , , pm fortunately , javascript is such an ace language that you can hand such a string to the date constructor and you 'll get a real date object back ! once you have that object , you can again in genius js fashion multiply it by one to convert it to milliseconds since the dawn of time a number ! perfect for sorting ! the rest of the code is not terribly interesting i loop over the nodes of interest and collect them into an array along with date as number then i sort using a custom comparator function an inner method then i have to loop over the nodes of interest and remove them from the dom then i have to loop again to add them back to the dom in sorted order , and voila ! sorted rss feeds function getdatefromitemitem var d item getelementsbytagname 'div' innerhtml split b s ? pop return new dated function reorderitems var rootclassname entry header var rootnode document getelementsbyclassnamerootclassname var cl document getelementsbyclassname hungryfeed item var r scratch array to hold nodes , dates loop over nodes of interest push them into r as node , date for var i i cl length i var item cl i var d getdatefromitemitem r push item , d we need this comparator function to sort the array on date function compa , b var aa a var bb b return bb aa r r sortcomp sort on date using comparator remove all news feed items ! they 're shown in random order ! for var i i r length i r i remove add them back , in date order for var i i r length i rootnode appendchildr i reorderitems do it