i came across an interesting patent application from microsoft published january called extended cascading style sheets in which microsoft extols the virtues of something called cssx which i suppose means css extensions from the abstract a cssx extended cascading style sheets file including non css cascading style sheet extensions is used to define and reference variables and inheritance sets a cssx file compiler determines a value of the defined variable , modifies the cssx file by replacing all references to the defined variable with the value , and generates the css file from the modified cssx file the inheritance set is defined in the cssx file and includes a reference to a previously defined css rule set the cssx file compiler defines a new css rule set as a function of the determined attributes included in the previously defined css rule set of the defined inheritance set and generates the css file including the newly defined css rule set from what i can tell , microsoft is proposing adding defines and other precompiler looking stuff to cascading style sheets so that a last minute compile pass on the server will generate css of the correct flavor for a given page request correct as to localization , reading direction , accessibility , etc all done dynamically , just in time the intent is clearly to eliminate the need for webmasters and others to create and manage multiple hard coded flavors of the same stylesheet in fact , cssx aims to make css more compositional all the way around the patent talks about introducing new inheritance notions into css , for example of course , there are drawbacks to consider cssx is not as easy to read or maintain as css but i suppose if your development tools are good enough , this wo n't matter so much cssx is more verbose than css it 's doubtless harder to qa test but the main drawback , i think , is that it tends to mix presentation logic with non presentation logic that 's a dangerous place to go unfortunately , microsoft wants to patent cssx when it should actually be working with a standards body on it does the world really need another proprietary standard from redmond , at this point ? what 's the point in extending a standard , then trying to patent it ? that part seems really , really stupid to me