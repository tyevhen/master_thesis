javascript expression closures new for js but syntactically even cleaner in are one of those things that seem very so what the first time you hear about it , but leaves you slapping your forehead and saying omg this is so darn freakin' cool repeatedly after you start using it why ? because omg it 's so darn freakin' cool the basic notion is that instead of writing short utility functions which i have a million of as , for example function square x return x x you just write function square x x x which yes yes , i know looks very so what , but bear with me for a moment the short syntax starts to become more compelling when you begin using it in anonymous functions , particularly callback functions which , as you know , tend to be anonymous a great deal of the time for example , suppose you have a custom comparator for the sort method of array function descending a , b return b a , , , , sortdescending , , , , you can instead write it as , , , , sort functiona , b b a another fairly trivial example suppose you want a function that will constrain strings to a certain length you can do something like function limits , n s length n ? s substring , n s as a more elaborate example , suppose you have the following code , designed to convert a camelcase string to underscore format function underscore str function tounderscore s return ' ' s tolowercase return str replace a z g , tounderscore underscore aname a name with the new closure syntax , you can do function underscore str str replace a z g , functions ' ' s tolowercase here i 've converted not only the outer function , but also the callback to replace , to expression closure form i split it into lines for readability , but it will still execute correctly as a liner you do n't have to write these things as one liners still not convinced ? try using this syntax supported in firefox , and anywhere else js or are implemented in some functions yourself , and see if your code does n't become easier to write , shorter , and in most cases more readable it may be only a small improvement on the more verbose older syntax , but an improvement is an improvement i 'll take it