like many others in this biz , i 've been following the development of adobe 's extensible metadata platform xmp for quite some time , and for at least three years i 've been saying that it would be in adobe 's best interest to hand oversight over this ostensibly open standard to a bonafide standards body rather than let adoption languish as people continue to associate xmp with adobe proprietary happily , adobe is in fact now doing the right thing xmp is in the process of becoming iso , via an effort led by my colleague frank biederich this effort could n't have come at a better time the content world is in desperate need of an industry standard way to represent rich content metadata , and i strongly believe xmp is the right technology at the right time one can quibble over whether embedding xmp in a host file is the correct thing to do as opposed to placing it in the file 's resource fork , or simply creating xmp as a separate sidecar file and managing it separately there are good arguments pro and con but packaging issues aside , there 's not much question , in my mind , that nearly every form of content benefits from having easily parsed metadata associated with it this is particularly true of enterprise content content that 's managed in some kind of access controlled repository the availability of metadata makes a given content bit easier to repurpose , easier to track , easier to search easier to work with all the way around at day software now a part of adobe , we 've long had a saying that everything is content i'm fond of saying that once metadata is attached , everything is an asset i think xmp is poised to become a huge success , comparable to , say , atom or rss first of all , the specification itself is short and easily understood thus easily implemented always a good thing where xml standards are concerned it 's also semantically flexible and highly extensible again two very good things the fact that it leverages rdf also bodes well for xmp as we trundle ever closer to the ontological web the social dimensions of an asset , for example , could easily be accommodated by xmp via rdf triples let your imagination dwell on that for a minute but i also think the timing for xmp is quite propitious just in terms of where it 's at in its lifecycle i was giving a talk last week at adobe research in basel on the subject of xmp in which i mentioned a certain lifecycle theory whose , i ca n't remember that sees all technologies as basically going through three phases , each one lasting about six years phase one is acceptance it takes around six years for anything truly new to change the way people think about it during this period , only alpha geeks will actually adopt the new technology phase two is adoption it takes six years for the at last understood new technology to enter the mainstream in earnest phase three is ubiquity this is when adoption becomes universal or as close to that as it 's going to get and the market is saturated not everything goes through an year cycle , obviously this is just a rough conceptual model , but i find that it applies in a surprising number of cases if we look at xmp which dates to through this model , we see that it is a little more than halfway through the adoption phase i think that the ratification of iso will kick off a ubiquity phase in which we see xmp used in more ways and in more places than anyone would ever have thought possible my talk last week in basel was in front of a roomful of developers everyone there was familiar with aspect oriented programming , so i made the admittedly imperfect analogy with xmp , saying imagine if resources could have aspects what would that look like ? it would look a lot like xmp the info that gets packaged up into xmp often has to do with crosscutting concerns , like access control , drm , version history , and what might be called serving suggestions mimetype , compatibility hints it 's not that far different from an advice stack in jbossaop even the packaging concerns are familiar from aop a classic problem in aop , after all , is where to put aspects in the source code itself as annotations , or in separate descriptors as in jbossaop ? the same concerns and tradeoffs arise with xmp in any case , i think the pressing need for more and better metadata as it pertains to enterprise content in particular plus the built in in many cases support for xmp in cell phone cameras , plus the need for ontology friendly web formats going forward , and many other factors including the opening up of xmp under iso , spell a perfect storm for xmp as we hurtle toward web next all i can say is it 's about time