convolution is a straightforward mathematical process that is fundamental to many image processing effects if you 've played around with the filter other custom dialog in photoshop , you 're already familiar with what convolutions can do a sharpening convolution applied to lena a convolution applies a matrix often called a kernel against each pixel in an image for any given pixel in the image , a new pixel value is calculated by multiplying the various values in the kernel by corresponding underlying pixel values , then summing the result and rescaling to the applicable pixel bandwidth , usually if you imagine a x kernel in which all values are equal to one , applying this as a convolution is the same as multiplying the center pixel and its eight nearest neighbors by one , then adding them all up and dividing by to rescale the pixel in other words , it 's tantamount to averaging pixel values , which essentially blurs the image slightly if you do this to every pixel , in turn the application of convolutions to an html canvas image is straightforward i 've created an example chrome extension that is active whenever you visit a url ending in jpg or png from any website the extension provides a x convolution kernel as text fields you can enter any values you want positive or negative in the kernel columns and rows behind the scenes , the kernel will be normalized for you automatically that simply means each value is divided by the sum of all the values , except in the case where the values sum to zero , in which instance the normalization step is skipped some convolutions , such as the sobel kernel , have kernel values that add up to zero in this case , you end up with a mostly dark image that you 'll probably want to invert my chrome extension provides an invert image button , for just that occasion a modified sobel kernel , plus image inversion the ui also includes a reset button which reloads the original image and sets the kernel to an identity kernel and a button that opens the newly modified image in a new window as a png that can be saved to disk the code for the chrome extension is shown below to use it , do this copy and paste all of the code into a new file call it kernel user js or whatever you want , but be sure the name ends with user js save the file text only to any convenient folder launch chrome use control o to bring up the file open dialog navigate to the file you just saved open it notice at the very bottom of the chrome window , there 'll be a status warning saying that extensions can harm your health , etc with two buttons , continue and discard click continue in the confirm installation dialog that pops up , click the install button after you do this , the extension is installed and running test it by navigating to any convenient url that ends in jpg or png but do note , the extension may fail due to security restrictions if you are loading images from disk , via a file scheme for best results , navigate to an image on the web using http name kerneltool namespace ktkerneltool description canvas image kernel tool include userscript a demo script by kas thomas use as you will , at your own risk the stuff under loadcode will be injected into a script element in the page function loadcode window kernel size x square kernel window transformimage function x , y , w , h var canvasdata context getimagedatax , y , w , h var kernel getkernelvalues normalizekernel kernel for var x x w x for var y y h y get the real estate around this pixel using the offscreen image var area context getimagedatax , y , kernel size , kernel size index of the current pixel in the array var idx x y w apply kernel to current index var rgb applykernel kernel , area , canvasdata , idx canvasdata data idx rgb canvasdata data idx rgb canvasdata data idx rgb inner function that applies the kernel function applykernel k , localdata , imagedata , pixelindex var sumr var sumg var sumb var n for var i i k length i , n sumr localdata data n k i sumg localdata data n k i sumb localdata data n k i if sumr sumr if sumg sumg if sumb sumb return math round sumr , math round sumg , math round sumb context putimagedata canvasdata , x , y window invertimage function var w canvas width var h canvas height var canvasdata context getimagedata , , w , h for var i i w h i canvasdata data i canvasdata data i canvasdata data i canvasdata data i canvasdata data i canvasdata data i context putimagedata canvasdata , , get an offscreen drawing context for the image window getoffscreencontext function w , h var offscreencanvas document createelement canvas offscreencanvas width w offscreencanvas height h return offscreencanvas getcontext d window getkernelvalues function var kernel document getelementsbyclassname kernel var kernelvalues new array for var i i kernelvalues length i kernelvalues i kernel i value return kernelvalues window setkernelvalues function values var kernel document getelementsbyclassname kernel for var i i kernel length i kernel i value values i window normalizekernel function k var sum for var i i k length i sum k i if sum for var i i k length i k i sum window setupglobals function window canvas document getelementbyid mycanvas window context canvas getcontext d var imagedata context getimagedata , , canvas width , canvas height window offscreencontext getoffscreencontext canvas width , canvas height window offscreencontext putimagedata imagedata , , setupglobals actually call it enable the buttons now that code is loaded document getelementbyid reset disabled false document getelementbyid invert disabled false document getelementbyid png disabled false end loadcode main function main are we really on an image url ? var ext location href split pop if ext match jpg jpeg png null return ditch the original image img document getelementsbytagname img img parentnode removechildimg put scripts into the page scope in a script elem with id mycode we will eval it in an event later var code document createelement script code setattribute id , mycode document body appendchildcode code innerhtml loadcode tostring n set up canvas canvas document createelement canvas canvas setattribute id , mycanvas document body appendchild canvas context canvas getcontext d image new image image onload function canvas width image width canvas height image height context drawimageimage , , , canvas width , canvas height this line must come after , not before , onload ! image src location href createkernelui createapplybutton createresetbutton createinvertimagebutton createpngbutton create ui for save as png function createpngbutton var button document createelement input button setattribute type , button button setattribute value , open as png button setattribute id , png button setattribute disabled , true button setattribute onclick , window opencanvas todataurl'image png' document body appendchild button function createinvertimagebutton var button document createelement input button setattribute type , button button setattribute value , invert image button setattribute id , invert button setattribute disabled , true button setattribute onclick , invertimage document body appendchild button function createresetbutton var button document createelement input button setattribute type , button button setattribute value , reset button setattribute id , reset button setattribute disabled , true button setattribute onclick , var data offscreencontext getimagedata , , canvas width , canvas height context putimagedatadata , , setkernelvalues , , , , , , , , document body appendchild button this will load code if it has n't been loaded yet function createapplybutton var button document createelement input button setattribute type , button button setattribute value , apply button setattribute onclick , if typeof codeloaded 'undefined' codeloaded code document getelementbyid mycode innerhtml evalcode loadcode transformimage , , canvas width , canvas height document body appendchild button function createkernelui var kdiv document createelement div var elem new array for var i i i elem i document createelement input elem i setattribute type , text elem i setattribute value , elem i setattribute class , kernel elem i setattribute style , width px elem i setattribute id , k i for var i i i kdiv appendchild elem i if i i i kdiv innerhtml br document body appendchild kdiv it can be fun and educational to experiment with new kernel values and to apply more than one convolution sequentially to achieve new effects with the right choice of values , you can easily achieve blurring , sharpening , embossing , and edge detection enhancement , among other effects incidentally , for more information about the lena test image in case you 're not familiar with the interesting backstory , check out http en wikipedia org wiki lenna