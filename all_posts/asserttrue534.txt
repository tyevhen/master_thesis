i advocate that software makers take a hard look at why and how so many features have made their way into their products the process by which non core functionality enters a product is more important obviously than the sheer number of features software makers should also reevaluate the process by which a feature becomes required and what it means for a feature to be required i 've been in tech for decades , and i 've never yet encountered a software product that did n't contain at least one totally useless feature , a feature no one ever uses the equivalent of the scroll lock key on a modern keyboard the important point to note is that all software features , even the most obscure and or useless ones , got into the product as a result of somebody 's requirement i propose that software makers go on a feature fast until the feature addition process is not only well understood but re imagined let marketing be a stakeholder in this process , but let it be only one of many stakeholders not the majority stakeholder until then , i offer the following exercises for purveyors of commercial software implement in situ analytics inside the app analytics so that you can understand how users are spending their time when they work with the product find out via built in analytics what the least used feature of your product is get rid of it repeat no for another features replace them with api methods and helpful tooling an sdk charge no money for the sdk have you ever added an obscure feature because an important customer asked for it ? if so , consider the following did you make the sale ? did the sale of the product actually hinge on that one feature ? hopefully not hopefully the product 's core functionality and reputation for excellence made the sale five years later , is that customer still with you ? are they still using the feature ? if not , why are you continuing to code maintain , regression test , document , and tech support a one off feature that 's no longer needed ? of all the ui elements that are in the user 's face by default , find which ones are least used of all the ui elements that are not readily visible , find those that are most used consider ways to swap the two try to determine how many features are in your product develop your own methodology for this , then determine how many features are used by what percentage of customers when you have that data , visualize it in more than one way , graphically when you 're done , ask yourself if you would n't be better off , from a resource allocation standpoint , if you stopped working on at the margin features and reinvested those dollars in making core features even more outstanding obtain via real time analytics a profile of a given user 's favorite or most used features and preemptively load those into memory , for that particular user , at startup time lazily load everything else , and in any case , do n't single task the entire loading process and make the user stare at a splash screen the preferential loading of modules according to a user specific profile is essentially the equivalent of doing a custom build of the product on a per customer basis , based on demonstrated customer needs is n't this what you should be aiming for ? find out the extent to which customers are using your product under duress , and why in other words , if your product is microsoft word , and you have customers who are still doing a certain amount of text editing in a lesser product such as wordpad , find out how many customers are doing that and why address the problem in tomorrow 's post , i'm going to list some favorite software design mantras that all people involved in building , testing , documenting , supporting , or marketing software products can i hope learn something from do n't miss it