i 've been talking a lot about feature richness as if it 's a measure of product complexity , which it might not be what i care about , in any case , is not feature count per se , nor complexity per se , but a product 's perceived utility and ease of use for matters involving feature count , it may actually be more useful to talk about total gui surface area after all , features often equate in at least a rough sense to clicks on controls of various sorts push buttons , radio buttons , checkboxes , menu selections , color pickers , calendar controls , etc in some sense , feature count and gui surface area go hand in hand how to calculate gui surface area ? dialogs and other ui elements tend to grow in proportion to an app 's functionality , so why not just add up the actual screen real estate consumed by all the dialogs , toolbars , palettes , tabs , and menus in the product in pixels squared , and call that the ui 's surface area ? i offer , without further proof , the conjecture that a program 's perceived complexity is related in some suitably subtle way to a program 's total gui surface area i also contend that the bigger a product 's total gui surface area , the smaller the user is made to feel moreover , if a product 's total functional surface area far exceeds a customer 's actual use case requirements , an unavoidable impression of waste is conveyed more than that , the customer might very well infer that the product came from a culture of waste , an engineering culture that does n't value efficiency that 's a devastating assumption to let take root in a customer 's mind do you really want a customer to feel he has paid good money for unnecessary functionality ? ever ? if you know that eighty percent of customers will only ever use twenty percent of the software 's features , do you really want to brag , in your marketing , about the extravagant excess of functionality in your product ? is n't it more important to be able to emphasize the inarguably superior nature of the product 's core functionality ? should n't non core functionality be non core to marketing dialogs until the customer demands otherwise ? in tomorrow 's post , i 'll offer constructive suggestions for software makers ideas that can actually be implemented and tested why argue about ideas when you can test them ?