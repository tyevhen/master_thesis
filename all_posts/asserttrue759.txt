yesterday , i was thinking about complexity in software systems and i had a kind of aha ! moment it occurred to me that most of the programmer hours time spent in product development are wasted we know that something like to some experts say of the features in a software system are typically never used , while another are rarely used that means over half the code written for a product seldom , if ever , actually executes the irony here , if you think about it , is mindblowing software companies that are asking employees to turn their pcs off at night to save a few dollars on electricity are wasting huge dumpster loads of cash every day to create code that 'll never execute is it worth creating the excess code ? one could argue that it is , because there 's always the chance someone will need to execute the unused bits , at some point in time in fact , if you think about it , there are many things in this life that follow the pattern of you seldom , if ever , need it , but when you need it , you really need it insurance , for example should we go through life uninsured just because we think we 'll never experience disaster ? unused software features are not like health insurance , though they 're more like teacup and soda straw insurance insurance at the granularity level of teacups is ridiculous and in the aggregate could get quite expensive but that 's kind of the situation we 're in with a lot of large , expensive software systems and a fair number of popular desktop programs , too photoshop , acrobat professional , openoffice being just three you pay for a huge excess of features you 'll never use there 's no magic answer to the problem of how do you know which features not to write ? , obviously it 's a judgment call but i think it 's critical for vendors , who need to cut costs , and customers , who are looking for less expensive solutions to problems to try to address the problem in a meaningful fashion what can be done ? at least two things we know that formal requirements tend pretty much universally to err on the side of feature richness , rather than leanness it 's important to address the problem early in the chain do n't overspecify requirements in software companies , product managers and others who drive requirements need to learn to think in terms of core use cases , and stop catering to every customer request for a specialized feature there 's a cost associated with implementing even the smallest new feature strive to hit the use case those are the scenarios and customer needs you ca n't afford to ignore if you 're a software buyer , stop writing gargantuan rfps again , figure out what your core use cases are you wo n't know what your real world needs are until you 've been in production a year do n't try to anticipate every possible need in advance or insist on full generality stick with hard core business requirements , because your odds of getting that right are small enough as it is another approach to take is to insist on modular design factor out minority functionalities in such a way that they can easily be added back in later through snap ins or extra modules create a framework create services then compose an application product managers quit listening to every ridiculous feature request from the field do n't drive needless features into a product because one customer asked for this or that edge case to be supported make it easy for customers and ses to build and share their own add ons instead infrequently executed baggage code is costly for everyone let 's stop demanding it