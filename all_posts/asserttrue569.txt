perlin noise in two dimensions , generated using the code below i 've been working on an html canvas based procedural texture demo which i 'll blog about tomorrow , for which i did a javascript port of ken perlin 's noise routine which is in java ahead of tomorrow 's blog , i thought i 'd briefly discuss perlin noise perlin noise if you 've worked with d graphics programs , you 're already well familiar with ken perlin 's famous noise function which gives rise to so called perlin noise the code for it looks a little scary , but intuitively it 's an easy function to understand let 's take the d case although you can generate perlin noise for any number of dimensions imagine that you have a pixel square image blank , all white now , imagine that i come along and tell you to mark the canvas off into rows and columns of x pixel squares further imagine that i ask you to assign a random grey value to each square you 've now got a kind of checkerboard pattern of random greys what differentiates perlin noise from random checkboard noise is that in perlin 's case , the color values are interpolated smoothly from the center of each tile outward , in such a way that you do n't see an obvious gridlike pattern in other words , when you cross a tile boundary , you want the slope of the pixel intensity to be constant no discontinuities you can visualize the end result if you took the x random checkboard pattern and passed it through a gaussian blur a few times pretty soon , you would n't even be able to tell that gridlines ever existed in the first place that 's the idea with perlin noise you want to interpolate colors from one block to the next in such a way that there are no discontinuities at the cell boundaries it turns out this requirement can be met in quite a variety of ways by using cubic splines , quartics , or even sine or cosine based interpolation between squares , for example or by using perlin 's gain function there 's no one correct way to do it i 'd love to be able to link to a good perlin noise tutorial on the web , but so far i have n't found one that does n't try to conflate fractal noise , turbulence , and other topics with perlin noise the best treatment i 've come across , frankly , is not surprisingly in perlin 's own texturing and modeling book which is truly a first rate book , must reading for graphics programmers fortunately , ken perlin has done all the hard work for us in writing the necessary interpolation and other code for noise , and he has kindly provided a d reference implementation of the noise function in highly optimized java i ported his code to javascript see below and i'm happy to say it works very well in a canvas environment as we 'll see in tomorrow 's post , right here it 's reasonably fast , too in fact , it 's so fast that there 's no need to fall back to a d version for better speed this is good , because the d version gives you added versatility in case you decide you want to animate your noise in the time domain usage of perlin 's function is very straightforward it takes arguments in java , these are double precision floating point numbers which is fine , because in javascript all numbers are ieee double precision floating point numbers , under the covers the way the function is usually used , the first two arguments correspond to the x and y coordinate values of a pixel in space if you 're working in space , the third argument is the z value in space , you can call the noise function with the third argument set to whatever you like if you 're doing a d animation and want the texture to animate in real time , you can link the third argument that z value to a time based index , and the texture will animate smoothly , because you are , in effect , sampling closely spaced slices of a d noise space the return value from noise is a double precision floating point number in the range actually , in perlin 's original code , the return value can range from to , but in my javascript port below , i clamp the return to here 's the code this is a port of ken perlin 's java code the original java code is at http cs nyu edu eperlin noise note that in this version , a number from to is returned perlinnoise new function this noise functionx , y , z var p new array var permutationfor var i i i p i p i permutation i var x math floorx , find unit cube that y math floory , contains point z math floorz x math floorx find relative x , y , z y math floory of point in cube z math floorz var u fadex , compute fade curves v fadey , for each of x , y , z w fadez var a p x y , aa p a z , ab p a z , hash coordinates of b p x y , ba p b z , bb p b z the cube corners , return scalelerpw , lerpv , lerpu , gradp aa , x , y , z , and add gradp ba , x , y , z , blended lerpu , gradp ab , x , y , z , results gradp bb , x , y , z , from lerpv , lerpu , gradp aa , x , y , z , corners gradp ba , x , y , z , of cube lerpu , gradp ab , x , y , z , gradp bb , x , y , z function fadet return t t t t t function lerp t , a , b return a t b a function gradhash , x , y , z var h hash convert lo bits of hash code var u h ? x y , into gradient directions v h ? y h h ? x z return h ? u u h ? v v function scalen return n so let 's say you have a function that marches through all the pixel values in an image , and you want to use this code you need the x and y coordinates of the pixel , the width of the image as w , and the height as h then you could do something like x w y h normalize size pick a scaling value n perlinnoise noise size x , size y , r g b math round n here , the z argument is arbitrarily set to , but it could just as well be set to zero or whatever you like you can fiddle with size to get a result that 's visually pleasing it will vary considerably , depending on the effect that you 're trying to achieve if you 're animating the texture , the next time step might set the z arg to , say , instead of in the example given above , we 're setting r g b , which of course gives a grey pixel the overall result looks like the picture at the top of this post in fact , that image was generated using the code shown above perlin 's justly famous noise function is enormously versatile and a ton of fun to play with as i say , the most authoritative , in depth discussion of it occurs in perlin 's texturing and modeling book we 'll see more colorful uses of the noise function in tomorrow 's blog do n't miss it !