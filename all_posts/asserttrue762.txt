years ago , when i was first learning to program , i ran into a problem with some code i was writing , and i asked my mentor an extraordinarily gifted coder for some help he listened as i described the problem i told him all the things i had tried so far at that time , i was quite enamored of the think c development environment for the mac it had a fine step thru debugger , which i was quite reliant on my mentor suggested a couple more approaches to try and when i tried them , they worked , of course then he made a remark that has stayed with me ever since i try to stay away from debuggers , he said a debugger is a crutch you 're better off without it i was speechless with astonishment here was someone who wrote massive quantities of pascal and assembly for a wide variety of platforms and he never used a debugger ! i could n't have been more shocked if he told me he had perfected cold fusion if you get in the habit of using a debugger , my mentor pointed out , you 'll get lazy a certain part of your brain shuts off , because you expect the debugger to help you find the bug but in reality , you wrote the bug , and you should be able to find it still stunned , i asked what do you do when you have a really nasty bug ? he said something i 'll never forget i make the machine tell me where it is make the machine tell you where the bug is what a wonderful piece of advice it 's the essence of troubleshooting , whether you 're trying to fix a car that wo n't start , trace an electrical fault , or debug a piece of software my friend who did a lot of realtime programming in assembly , among other things pointed out to me that there are many programming scenarios in which it 's impossible to run a debugger anyway i took my mentor 's advice and stopped using a step through debugger the only real debugger i continued to use at that time was macsbug , which i occasionally invoked in order to inspect the heap or see what was going on in a stack frame sure enough , i found that once i stopped using a step thru debugger , my coding and troubleshooting skills improved rapidly i spent less time in endless loops fruitless troubleshooting sessions and got to the source of problems quicker i learned a lot about my own bad coding habits and developed a renewed appreciation for the importance of understanding a language at a level deeper than surface syntax to this day , i avoid step thru debugging , and find myself better off for it if you do a lot of step thru debugging , try this as an exercise for the next month , do n't use a debugger see if you can walk without crutches for a change i'm betting you 'll lose the limp in no time