lately i 've spent some time programming against the canvas api predictably , i encountered all the common beginner 's mistakes , and had to work through them along the way , i learned a number of useful things about canvas programming , some basic , some not so basic here 's a quick summary to avoid security errors , always serve your html and scripts from the same server as any images you 're going to be working with corollary do n't serve your html and images from the local filesystem that 's a sure way to get security errors install a local instance of apache web server or some other web server and serve content to your browser from localhost , if need be if you 're modifying pixels using context getimagedata , use putimagedata to draw back to the image , and be sure to supply all arguments to putimagedata ! here is a common pattern function dosomething var canvasdata context getimagedata , , imageobj width , imageobj height for var x x w x for var y y h y var idx x y w var r canvasdata data idx var g canvasdata data idx var b canvasdata data idx do something to r , g , b here canvasdata data idx r canvasdata data idx g canvasdata data idx b draw it back out to the screen context putimagedatacanvasdata , , notice the three arguments to putimagedata the final two args are the x and y position at which to draw the image if you forget those two args , expect errors you can draw offscreen by simply creating a canvas element programmatically like this imageobj new image imageobj src http localhost content lena png function getoffscreencontextimageobj var offscreencanvas document createelement canvas offscreencanvas width imageobj width offscreencanvas height imageobj height return offscreencanvas getcontext d if you use this function or one like it , you can keep an offscreen copy of your image around , which can be extremely handy you can save programmatically created modified images offline the trick is to slurp the canvas into a data url and then open or display that url in a new frame or window where you can right click it to get the usual image save options from the browser something like this myimage canvas todataurl image png window open myimage opens in new window as a png this serializes the image as a big , huge data url , then opens the image in a new window the new window contains a png image , plain and simple any time you assign a value to canvas width or canvas height , you will wipe the canvas clean ! this is both weird and handy just doing canvas width canvas width will instantly erase the canvas when all else fails , consult the html canvas cheatsheet