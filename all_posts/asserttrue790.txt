i came across an interesting and short paper by microsoft user experience guru steven clarke called what is an end user software engineer ? it discusses the idea of programmer personas and how microsoft has leveraged that concept to redesign visual studio and various apis for better usability a persona captures assumptions around work styles and motivations not all programmers are motivated by the same things or have the same goals a sales engineer might have a different set of problems to solve than a senior developer in r d , and might be accustomed to working in quite a different way yet both may have to code against the same libraries using the same tools is it possible to satisfy both groups of programmer users ? are there api design or tool design best practices that apply across the board regardless of persona type ? what do we know about the things that work for one programmer persona but not another ? the formulation of persona types is obviously somewhat arbitrary , but it 's interesting that microsoft did go to the trouble to observe programmers working not only in usability labs but in their natural habitats over a period of months in order to arrive at three main personas the systematic developer writes code defensively does everything he or she can to protect code from unstable and untrustworthy processes running in parallel with their code develops a deep understanding of a technology before using it prides himself or herself on building elegant solutions the pragmatic developer writes code methodically develops sufficient understanding of a technology to enable competent use of it prides himself or herself on building robust applications the opportunistic developer writes code in an exploratory fashion develops a sufficient understanding of a technology to understand how it can solve a business problem prides himself herself on solving business problems clarke discusses microsoft 's usability philosophy in greater detail in a dr dobbs journal article that i think is still quite relevant today check it out when you get a chance for people in the tooling and api design business , there 's a lot to think about here ask yourself do you know what the personas of your users might be like ? are you taking that information into account in your api , sdk , and tool designs ? do you do serious usability testing of your apis and development tools before putting them in the hands of customers ? if not , why not ? giving programmers usable tools , it seems to me , is the first step to making programmers more productive and that benefits everyone