i was thinking the other day about how best to keep the details of application logic hidden from swing widgets in the spirit of martin fowler 's presentation model , the main intuition being that a user app can should arguably be modeled as a set of nonvisual capabilities to which utterly dumb gui widgets can later be mapped achieving this in a clean way is incredibly difficult or at least for me it is i had an epiphany of sorts when you design a standalone user app a menu driven desktop app , what 's the first piece of ui you design ? the menu system and what is a menu ? in swing java , it 's a series of nested buttons jmenu and jmenuitem inherit from javax swing abstractbutton the menubar never goes away some apps let you hide it , in which case it 's merely made invisible it does n't actually get released from memory there 's a name , of course , for collections of buttons that never go away a non modal dialog my epiphany was is that a menu system is a collection of non modal dialogs and i hate non modal dialogs , both as a user and as a programmer in the typical menu driven app , menus are non modal dialogs in which each button knows too much about deep application internals the ever changing state of the entire app is controlled through this collage of interdependent buttons , and managing the underlying ill formed dependency graph is difficult , and this is why menu apps are a pain the ass to write