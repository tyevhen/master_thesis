in a recent post , i talked about a legacy technology from the s that 's an integral part of hundreds of millions of computers today the qwerty keyboard layout qwerty was designed as an usability antipattern , and its widespread use probably costs the u s economy a billion dollars a week in lost productivity that 's my swag estimate , anyway but that 's a hardware problem as a programmer , i think the legacy annoyance i most love to hate is the newline the fact that the computing world never settled on an industry standard definition of what a newline is strikes me as a bit disconcerting , given how ubiquitous newlines are but it 's way too late to change things there 's too much legacy code out there , on oses that are n't going to change how they treat newlines the only os that ever changed its treatment of newlines , as far as i know , is macos , which up to system considered a newline to be ascii xd , also known as a carriage return cr it 's now the linefeed ascii , xa , of course , as it is in most unix based systems it always bothered me that dos and windows adhered to the double character newline idiom xda cr lf to me it always seemed that one character or token not a doublet should be all that 's needed to signify end of line , and since unix and linux use lf , it makes sense to me to just go with that but no gates and company went with cr lf turns out it 's not gates 's fault , of course the use of cr lf as a newline stems from the early use of teletype machines as terminals with tty devices , achieving a new line on a printout required two different operations one signal to move the print head back to the start position , and another signal to cause the tractor feed wheel to step to the next position in its rotation , bringing the paper up a line thus cr , then lf the fact that we 're still emulating that set of signals in modern software is kind of funny but that 's how legacy stuff tends to be funny in a sad sort of way in any event , here 's how the different operating systems expect to see newlines represented cr lf xda dos , os , microsoft windows , cp m , mp m , most early non unix , non ibm oses lf xa unix and unix like systems gnu linux , aix , xenix , mac os x , freebsd , etc , beos , amiga , risc os , others cr xd commodore machines , apple ii family , mac os up to version and os nel x ebcdic systems mainly ibm mainframe systems , including z os os and i os os the closest thing there is to a codification of newline standards is the unicode interpretation of newlines of course , it 's a very liberal interpretation , to enable reversible transcoding of legacy files across oses the unicode standard defines the following characters that conforming applications should recognize as line terminators lf line feed , u a cr carriage return , u d cr lf cr followed by lf , u d followed by u a nel next line , u ff form feed , u c ls line separator , u ps paragraph separator , u for more info on newlines and edge cases involving newlines , the best article i could find on the web is this one by xavier noria it 's quite a good writeup there 's also an interesting discussion of newlines in the ecma pdf specification see especially the discussion on page of the difference in how java and javascript treat unicode escape sequences in comments for true geeks only many happy returns !