one of the things that gives apache sling a great deal of power and flexibility is the way it resolves script urls consider a request for the url content corporate jobs developer html first , sling will look in the repository for a file at exactly this location if such a file is found , it will be streamed out as is but if there is no file to be found sling will look for a repository node located at content corporate jobs developer and will return if no such node exists if the node is found , sling then looks for a special property on that node named sling resourcetype , which if present determines the resource type for that node sling will look under apps then lib to find a script that applies to the resource type let 's consider a very simple example suppose that the resource type for the above node is hr job in that case , sling will look for a script called apps hr job job jsp or apps hr job job esp the esp extension is for ecmascript server pages however , if such a script does n't exist , sling will then look for apps hr job get jsp or esp to service the get request sling will also count apps hr job html jsp or esp as a match , if it finds it where things get interesting is when selectors are used in the target path in content centric applications , the same content the same jcr nodes , in sling must often be displayed in different variants e g , as a teaser view versus a detail view this can be accomplished through extra name steps called selectors for example content corporate jobs developer detail html in this case , detail is a selector sling will look for a script at apps hr job job detail esp but apps hr job job detail html esp will also work it 's possible to use multiple selectors in a resource url for example , consider content corporate jobs developer print a html in this case , there are two selectors print and a as well as a file extension html how does sling know where to start looking for a matching script ? well , it turns out that if a file called a html jsp exists under a path of apps hr jobs print , it will be chosen before any other scripts that might match if such a file does n't exist but there happens to be a file , html jsp , under apps hr jobs print a , that file would be chosen next assuming all of the following scripts exist in the proper locations , they would be accessed in the order of preference shown apps hr jobs print a html jsp apps hr jobs print a html jsp apps hr jobs print a jsp apps hr jobs print html jsp apps hr jobs print jsp apps hr jobs html jsp apps hr jobs jobs jsp apps hr jobs get jsp this precedence order is somewhat at odds with the example given in sling in particular , a script named print a get html jsp never gets chosen nor does print a html jsp whether this is by design or constitutes a bug has yet to be determined but in any case , the above precedence behavior has been verified for more information on sling script resolution , be sure to consult the excellent sling cheat sheet as well as michael marth 's previous post on this topic many thanks to robin bussell at day software for pointing out the correct script precedence order