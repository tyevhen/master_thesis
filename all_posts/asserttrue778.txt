i promised yesterday that we 'd do a bit of console scripting today , illustrating three semi useful techniques doing ajax in the console using the twitter rest api as part of no in particular , we 'll try one of the new social graph calls we 'll intersect two sets , in javascript and do it in linear time twitter 's social graph methods are very straightforward the relevant api doc is here and i wo n't repeat it they 're intended to let you retrieve all of a person 's followers , or all of the person 's friends followees , all at once , using one http get you can get the results back either as json or as xml your choice the results come back as an array of user ids nothing else no name or profile info or anything like that you can certainly convert an id into extended user info for that person using other methods but you 'll have to do it one user one id at a time , which can be slow and also , it quickly eats into the twitter imposed bandwidth limit of queries per minute time period what 's the point of dealing with numeric ids in the first place ? well , the idea is that if you are mainly doing social analysis types of things e g , identifying and characterizing foaf clusters , trying to figure out how and why and when people form social bonds , you do n't really need anybody 's profile information for that you can do an awful lot just by fetching and comparing sets of id numbers for example , suppose you want to know how many of vignettecorp 's followers are also following opentext these are the corporate twitter account names for vignette corporation and open text , respectively as of right now , as i sit here typing this , vignettecorp has followers and opentext has how much overlap is there ? how many followers of one are also following the other ? to answer that question , we need to obtain the two groups of followers and intersect them that 's what the following code does using ajax , we send two gets to twitter com 's server , so as to receive the follower arrays for vignettecorp and opentext we convert each array to a set then we intersect the sets finally , we paint the results to the current browser window we can do all of this from the firebug console , if you 're a firefox firebug user just cut and paste the following code to the console and run it note before doing this , be sure to point your browser to twitter com and log on , if need be you need to have a twitter page any twitter page open before you begin , as otherwise you 'll get a cross site ajax error function intersect seta , setb var set for var i in seta if i in setb set i i return set ajax magic function getidsforuser user var req new xmlhttprequest var url http twitter com followers ids user json req open 'get' , url , false req send null return eval req responsetext put each member of an array into a property of the same name in an object called 'set' function arraytoset array var set var id for array length id array pop set id id return set this is arbitrary rewrite to suit your display needs function output data var a var ar for var id in data ar push a id data id id document body innerhtml total ar length ids in common br document body innerhtml ar join br main everything starts from here function main var user vignettecorp var user opentext var userarray getidsforuser user var userset arraytoset userarray var userarray getidsforuser user var userset arraytoset userarray intersect the two sets of users var intersection intersect userset , userset output intersection i have n't done any error checking and the code is n't going to win any awards for prettiness or safety , but hey , this is console code if it detonates , no one goes to the hospital when i ran this code last night , it said there were user ids in common between vignettecorp and opentext that 's substantial overlap marketers live for this kind of information note that for speed , i convert the user id arrays to javascript objects where the user id becomes a property name so that we can check for membership using javascript 's in syntax this lets us avoid a horrible speed hit if we were to do a brute force direct comparison of every member of seta against every member of setb , the intersection routine would execute in n squared time , which may be okay for small sets , but is intolerable for large ones in this case , with members in each set , an n squared algorithm requires k comparisons but imagine if you were to intersect scobleizer 's follower list k followers with guykawasaki 's k that comes to about billion comparison operations you do n't want to try that with javascript note , incidentally , that if you want to take the difference of two sets , you can just change the line of code in the intersection routine that says if i in setb to if ! i in setb but also note , of course , that set subtraction is not commutative so there you go if you 're a social graph researcher , or maybe if you just want to build your own set of twitter list management tools , the above code should get you started and now you also know how to do some ajax in the firebug console , without blowing a hand or a foot off still , keep some first aid supplies handy