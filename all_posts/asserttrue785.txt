bruce eckel thinking in java has an interesting post on the positive legacy of c and java i'm a sucker for articles that talk about java and c as legacy languages , and this one is notable not only for the fact that it comes from a true authority eckel was on the c standards committee for years , and saw the language design decisions take place first hand but for the odd comments mostly lengthy , mostly astute and non emotional that his post provoked eckel 's post is akin to a very short eulogy i wish it had been much longer but the fact is , eckel has written numerous article , books , and blogs over the past five or six years outlining the weaknesses large and small of java and c , so it 's not hard to find more to read on this subject java is far from dead , of course much like cobol , it will live on and on , eventually becoming something of an arcane specialty language mostly taught in universities what were are some of java 's biggest failings ? maybe it 's more important and constructive to ask what its biggest successes were to me , java 's major disruptive effect when it arrived in the mid s was and is due to its game changing notion of running on a virtualized machine the idea of cleanly separating a language from underlying machine dependencies was a huge advance in sum , the importance of java is that it was is not just a language but a platform a second pivotally important aspect of java is that by its very design , it facilitated programming in the large the package mechanism , the orientation toward safe reuse , and the assurance of a common , stable , secure , platform independent process space in which to run the jvm , allowed teams of programmers to work independently to produce large applications that could take advantage of the huge advances in machine design per moore 's law that occurred throughout the s without which , frankly , java would have failed to be anything but a curiosity by supporting programming in the large , java made possible the huge middleware industry we see around us today certainly we would have had a middleware industry without java , but it would have looked much different and come with a much different set of problems it would have had even more of a rube goldbergish quality to it than it has now java popularized the notion of an application server , which by itself was a landmark development that changed the software industry another outcome of java and c the notion of design patterns the very complexity of the large systems made possible by java and c demanded a new type of best practices knowledge around the construction of orchestrated systems tm we owe a lot to java , clearly , but the sheer cost of using java for smaller scale projects is driving the creation of new , lighter weight languages and frameworks that offer a better impedance match with agile working styles going forward , it simply wo n't be economical to use java for most kinds of development the industry has n't quite figured out yet what the best technologies are for replacing java in various types of development , but that 's what makes things so interesting right now economic downturns like the one we 're in tend to drive intense competition , and intense competition breeds innovation hence , whatever the next big disruption in programming turns out to be , it will probably come sooner rather than later one thing is for sure if you 're in the software development business , do n't cling to old ways of doing development and also , do n't get too carried away thinking that something like scrum is going to be the bandaid that fixes your agility problems , because it may turn out that your main problem is java itself keep an open mind try new things be ready when the next disruption arrives , or you may find yourself without a chair when the music stops