the source image lena at left its pixel distribution histogram according to wikipedia , an image histogram is a type of histogram which acts as a graphical representation of the tonal distribution in a digital image it plots the number of pixels for each tonal value by looking at the histogram for a specific image a viewer will be able to judge the entire tonal distribution at a glance it occurred to me that it should n't be that hard to get google charts to produce an image histogram , with just a few lines of code and that turns out to be true around lines of server side javascript will do the trick if you have jdk , run the command jrunscript in the console or find jrunscript exe in your jdk 's bin folder and run it then you can cut and paste the following lines into the console and execute them in real time alternatively , download js jar from the mozilla rhino project , and run java cp js jar org mozilla javascript tools shell main in the console the first order of business is to open and display an image in a jframe the following lines of javascript will accomplish this imageurl http wcours gel ulaval ca a gif default fichiers lena png io packages javax imageio imageio image io read new java net urlimageurl frame new packages javax swing jframe frame setbounds , , image getwidth , image getheight frame setvisibletrue pane frame getcontentpane graphics pane getgraphics graphics drawimage image , , , null the next order of business is to set up a histogram table , loop over all pixel values in the image , tally the pixel counts , and form the data into a url that google charts can use function getmaxvalue array for var i , max i array length i max array i max ? array i max return max get pixels width image getwidth height image getheight pixels image getrgb , , width , height , null , , width initialize the histogram table table new array join'' split'' populate the table for var i i pixels length i table pixels i maxvalue getmaxvalue table data new array for var i i table length i data push math floor table i maxvalue data data join , url http chart apis google com chart ? chxt y chbh a , , chs x cht bvg chco chtt histogram chd t call google charts image io read new java net url url data draw the resulting image graphics drawimage image , , , null note that we actually tally only the green pixel values but these are the most representative of tonal values in an rgb image , generally table values are normalized against maxvalue , then multiplied by to result in a number in the range google obligingly plots the data exactly as shown in the above graphic and that 's about all there is to say , except why ca n't all graphics operations be this easy ?