day communique performance optimization methodology view more presentations from david nuescheler tags optimization cq the folks at day software have put together a few common sense pointers for attacking performance optimization problems involving content management systems some of the advice applies pretty generally to all manner of enterprise software , so i thought i 'd post david 's very brief slideshow on this subject here he elaborates on these ideas in a blog entry here i would add only a few side comments my main comment is that performance optimization should in my view be approached as a kind of debugging exercise you want to narrow down the source of the main bottleneck there is , in fact , only one main bottleneck after you find and fix that bottleneck , you will proceed to find the new main bottleneck , then fix it lather , rinse , repeat it 's very easy to get side tracked and waste time optimizing something that 's completely unimportant careful testing will tell you what 's important what you think is important may not be just as with any debugging exercise , you never start by fiddling with a million variables at once you 're not looking to find a million sources of trouble , you 're looking to find the main source of trouble it 's rare , in my experience , that performance is ever gated by several factors of more or less equal magnitude every time i have gone in search of more performance , i 've found that there was always one bottleneck that greatly surpassed all others in importance when i finally found and eliminated that main bottleneck , there 'd be a new one that outstripped all others eliminating the first choke point might give , say , a three fold speedup eliminating the second one might give another two fold increase in performance each subsequent bottleneck removal adds to the multiplier effect it 's not unusual that removing three bottlenecks in a row gives an overall ten fold increase in performance anyone who has ported code to assembly language knows what i am talking about something else i 'd add is that best practices always beat better hardware using a clever algorithm in place of a stupid one constitutes a best practice for purposes of this discussion throwing more hardware at a problem is seldom worthwhile and sometimes leads to more performance problems , actually so , do n't go looking for performance problems in a million places generally the answer is in one place