someone asked me the other day in response to my earlier blog about job interviews what question i would ask during a job interview if i could ask only one question which is , itself , a very interesting question i initially responded by asking for more context , specifically what kind of position am i trying to fill ? is the candidate in question applying for an r d job e g , web application developer ? or is she applying for a software industry position that requires no programming knowledge per se ? in general , as a hiring manager , the thing that interests me the most is the person 's ability to get work done , and in technology , that , to me , means i want someone who is an incredibly fast learner there 's no way you can come into a job already possessing of the domain knowledge you 're expected to have some on the job learning is bound to be necessary beyond that , even when you 've adapted to the job , constant learning is a requirement i 've never seen a tech job where that was n't true so one of my favorite interview questions is if you have a hard assignment that involves subject domains you know little or nothing about , what would be your approach to attacking the problem ? if the person 's first words are consult google , that 's fine that 's a given , actually but i want to know more consult google , sure consult wikipedia , maybe , but then what ? what i do n't want to hear as the very first thing is go ask someone in r d or come and ask you if your very first tactic is to disturb busy coworkers without first doing any homework yourself , it means you 're too lazy to at least try to find answers on your own it also means you 're inconsiderate of the value of other people 's time newbies who ask questions on forums that could easily have been answered with a little prior research tend to get rude treatment on forums , for precisely this reason you do n't bother experts with non expert questions , especially unless you 've already done all the work you can possibly do on your own to solve the problem yourself only then should you bother other people some good answers to the question of how would i attack a difficult problem might include go straight to the authoritative source documentation for example , if the problem involves ex syntax , go read ecma if the problem involves xpath , go to the wc xpath language recommendation and so on go to the source ! then work your way out from there see what 's already been done internally , inside the organization , on this problem that means consulting company or departmental wikis , reading internal documents meeting minutes , business intelligence reports , etc , reading source code and or code comments , and so on find out who the acknowledged experts in the industry are on the subject in question and go look at their articles and blogs consult forums , too , if applicable post questions on forums , if you can do so without revealing private company information if you have a friend who is knowledgeable on the subject , reach out to the person and pick his or her brain again providing you 're able to do that without revealing proprietary information about your current project i do n't care if you bother someone outside the organization with endless questions finally , if you need to , find out who inside the organization is the domain expert on the subject , and ask that person if you could have a little of his or her time in summary , i need someone who is smart and a fast learner , but also resourceful and self motivated this post is getting to be longer than i thought , so i 'll stop tomorrow i want to speak to the issue of what question i would ask an r d candidate , if i could ask any question during a job interview that 'll be fun , i promise