a few days ago , i showed how to implement java awt paint in a way that lets you vary the paint appearance according to the x y position of a point onscreen in other words , treating paint as a procedural texture it turns out to be pretty straightforward implementing the paint interface means providing an implementation for paint 's one required method , createcontext public paintcontext createcontextcolormodel cm , rectangle devicebounds , rectangled userbounds , affinetransform xform , renderinghints hints most of the formal parameters are hints and can be ignored note that the createcontextmethod returns a java awt paintcontext object paintcontext is an interface , so you have to implement it as well , and this it turns out is where the real action occurs the methods of the paintcontext interface include public void dispose public colormodel getcolormodel public raster getrasterint x , int y , int w , int h the dispose method releases any resources that were allocated by the class in many cases , you 'll allocate nothing and thus your dispose method can be empty the getcolormodel method can , in most cases , be a one liner that simply returns colormodel getrgbdefault where things get interesting is in getraster that 's where you have the opportunity to set pixel values for all the pixels in the raster based on their x y values one of the most widely used procedural textures is ken perlin 's famous noise algorithm it might be an exaggeration but not by much to say that the majority of the cgi world 's most interesting textures start from , or at least in some way use , perlin noise one could say it 's the texture that launched a thousand oscars in , perlin won an academy award for technical achievement from the academy of motion picture arts and sciences for his noise algorithm that 's how foundationally important it is in cinematic cgi it turns out to be pretty easy to implement perlin noise in custom paint see the lines of code shown below note that in order to use this code , you need the class improvednoise java , which is a nifty reference implementation of perlin noise provided by ken perlin here scroll code sideways to see lines that do n't wrap perlinpaint kas thomas february public domain http asserttrue blogspot com demonstration of a custom java awt paint implementation this paint uses a two dimensional perlin noise texture , based on perlin 's improved reference implmentation see improvednoise java , http mrl nyu edu perlin noise thanks to david jones code monk for the idea import java awt color import java awt paint import java awt paintcontext import java awt rectangle import java awt renderinghints import java awt geom affinetransform import java awt geom rectangled import java awt image colormodel import java awt image raster import java awt image writableraster class perlinpaint implements paint static final affinetransform defaultxform affinetransform getscaleinstance , colors a and b stored in component form private float colora private float colorb private affinetransform transform public perlinpaintcolor a , color b colora a getcomponentsnull colorb b getcomponentsnull transform defaultxform public perlinpaintcolor a , color b , affinetransform transformarg colora a getcomponentsnull colorb b getcomponentsnull transform transformarg public paintcontext createcontextcolormodel cm , rectangle devicebounds , rectangled userbounds , affinetransform transform , renderinghints hints return new contextcm , transform public int gettransparency return java awt transparency opaque class context implements paintcontext public contextcolormodel cm , affinetransform transform public void dispose public colormodel getcolormodel return colormodel getrgbdefault getraster makes heavy use of the enclosing noisepaint instance public raster getrasterint xoffset , int yoffset , int w , int h writableraster raster getcolormodel createcompatiblewritableraster w , h float color new float for int y y h y for int x x w x treat each x y as a point in perlin space float p x xoffset , y yoffset transform transformp , , p , , float t floatimprovednoise noise p , p , improvednoise noise returns a float in the range , whereas we want a float in the range , so t t for int c c c color c lerp t , colora c , colorb c we assume the default rgb model , bits per band color c xff raster setpixel x , y , color return raster float lerp float t , float a , float b return a t b a the code should be self explanatory there are two constructors both allow you to pick the primary and secondary colors for the texture , but one includes an affinetransform , whereas the other does n't if you use the constructor with the transform , you can scale or rotate , etc the perlin noise to suit your needs to achieve the cloudy look , the text at the top of this post uses a scaling factor of in x and in y , per the script below note that to run the following script , it helps if you have a copy of imagemunger , the tiny java app i wrote about a couple weeks ago imagemunger is a very simple command line application you pass it two command line arguments , namely a file path pointing at a jpeg or other image file , and a file path pointing at a javascript file imagemunger opens the image in a jframe and executes the script meanwhile , it also puts two global variables in scope for your script to use image a reference to the bufferedimage object and panel a reference to the jcomponent that paints the image be sure you have jdk perlintext js kas thomas february public domain run this file using imagemunger http asserttrue blogspot com simple java class for running scripts html gd image creategraphics rh java awt renderinghints hint new rh rh key text antialiasing , rh value text antialias on gd setrenderinghints hint transform gd gettransform getscaleinstance , perlinpaint new packages perlinpaint java awt color blue , java awt color white , transform gd setpaint perlinpaint gd setfont new java awt font times new roman , java awt font bold , gd drawstring perlin , , gd drawstring noise , , panel updatepanel future projects implement perlin 's turbulence and brownian noise as custom paints implement a bump map faux d shaded version of perlinpaint