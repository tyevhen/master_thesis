i like things that go fast , and that includes code that runs fast with javascript and java , too , that can be a challenge so much the better , though i like challenges too when someone asks me what 's the single best way to speed up a slow script , naturally i want to know what the script is spending most of its time doing in browser scripting , it 's typical that a slow script operation either involves tedious string parsing of some kind , or dom operations that 's if you do n't count programmer insanity sorts of things , like creating a regular expression object over and over again in a loop the two most important pieces of advice i can give on speeding up browser scripts , then , are never hand parse a string do n't do dom operations in loops and in general , do n't do dom operations ! no means do n't do things like crawl a big long string using indexof to tokenize as you go instead , use replace or a split join technique , or some other technique that will basically have the effect of moving the loop into a c native routine inside the interpreter the general approach is discussed in a previous post an example would be hit highlighting in a long run of text do n't step through the text looking for the terms in question use replace no means to avoid looping over the return values from getelementsbytagname in fact , do n't call it unless you have to and get away from doing a lot of createelement , appendchild types of things , especially in loops , and especially in functions that get called a lot such as event handlers for mouse movements how ? use innerhtml wherever possible in other words , create your nodes as strings markup , then slam the final string into the dom at the last minute by setting the parent node 's innerhtml to that value this moves all the dom reconfiguring into the browser 's native dom routines , which it 'll happen at the speed of compiled c do n't sit there and rebuild the dom yourself , brick by brick , in javascript , unless you have to , which you seldom do there are other techniques for avoiding big speedups , but they 're more situational and i'm still learning , of course i'm still trying to find out what all the lazily invoked big speed hit operations are in gecko that can suddenly be triggered by scripts the situational speed hits can sometimes be addressed through caching of expensive objects , or reuse of expensive results a technique known as memoization good article here the mozilla folks have put a lot of work into speeding up the javascript runtimes , but remember , the fastest runtime environment in the world can be brought to its knees by poor choice of algorithms obviously it 's not always possible to employ the two techniques mentioned above , and in certain cases the performance gain is not impressive but in general , these remain underutilized techniques from what i can tell , which is why i bring them up here if you have additional techniques for speeding up javascript , by all means , leave a comment i'm interested in hearing your experiences