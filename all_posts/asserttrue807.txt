timothy fitz of imvu has written an excellent piece on fail fast methodology or continuous deployment , in this case , explaining the benefits of putting changes into production immediately and continuously , which in imvu 's case does not mean nightly builds it means several times an hour the main intuition here i 'll greatly oversimplify for the sake of claraity is that you have much greater chance of isolating the line of code that caused your build to break if you publish the build every time you change a line of code that sounds at once obvious and terrifying , of course , but it makes sense and it works for imvu , which takes in a million dollars a month serving avatars and virtual goods to several hundred thousand active users and another ten million or so occasional users of course , if you have very few users , serving builds super frequently does n't guarantee you 'll find out about bugs quickly and if you change lots of code between minute publishing cycles or whatever interval it turns out to be , you could end up with a real troubleshooting mess , although even in that case , you 'd know immediately which build to roll back to in order to get customers back to well behaved software continuous deployment does n't guarantee good design , of course , and it 's not a qa panacea it wo n't keep you from introducing code or design patterns that fail on scale out , for example but it 's still an interesting concept more so when you consider it 's not just theory a very successful high traffic site is built on this methodology fitz 's original post , incidentally as well as his followup post , drew a ton of responses many of the comments on the original post were negative , explaining why fail fast was dangerous or would n't work in all situations , etc totally ignoring the fact that it works very well for imvu comments on his followup post were much less cry baby , much better reasoned fitz as much as says , straight out , that unit testing is overrated which i totally agree with automated testing in general gets short shrift from fitz he notes wryly no automated tests are as brutal , random , malicious , ignorant or aggressive as the sum of all your users will be software breaks in service precisely because you ca n't predict in advance what will break it it 's like static analysis the fact that code compiles without warnings does n't mean it wo n't fail in service fitz did n't mention a plus side to continuous deployment that i think is extremely important , which is that it puts enormous pressure on programmers to get it right the first time it 's utterly unforgiving of sloth can you imagine knowing that every time you do a check in , your code goes live minutes later ? i think that would incent me to write some pretty damn solid code ! in any case , it makes for interesting food for thought kudos to fitz go imvu you guys rock