i was reading yesterday about richard p gabriel 's classic worse is better theory , which wraps a lot of related concepts , such as less is more , good enough is good enough , kiss , and yagni the key intuition is that the more you try to perfect something by adding to it , the less perfect it gets so do n't try to perfect it leave it imperfect , it 'll be better that way worse is better alas , worse is better goes against more entrenched philosophies like correctness before efficiency and completeness over simplicity on a business level , it goes against the philosophy of give the customer every damn feature he wants it says let 's leave a large number of ultimately unimportant features out , and concentrate on making the rest do what it 's supposed to do a prototype or proof of concept that slam dunks the desired functionality , but sucks at the code level because classes are n't cleanly factored , is an example of worse is better chances are , when the poc is later discarded , then reimplemented correctly by a team of gof acolytes , it will morph into an overfactored , underperforming pig with unexplainable memory leaks and a hard to describe odor but hey , it 'll scale is worse always better ? of course not better is , by and large , better just not in the software world , where better tends to take on unexpected meanings