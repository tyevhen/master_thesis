yesterday , someone i follow on twitter johnstack said he enjoyed my post on writing faster code and asked if i 'd refer to some examples of do less , go fast canonical examples from algorithms abound i wo n't attempt to list them quicksort versus bubble sort is an example that comes to mind although worst case performance is actually the same for both of those algorithms as is often true of divide and conquer approaches one of the most outstanding do less algorithms of all time would have to be the fast fourier transform , anticipated in by carl friedrich gauss but made popular by cooley and tukey in do less does n't always mean choosing a different algorithm sometimes you just need to parameterize the problem properly i do n't mean parameterize in a rigorous mathematical sense what i'm talking about is rethinking the problem so you can define it and attack it in some fundamentally new way you can find plenty of examples of this sort of thing in graphics programming , particularly d graphics the graphics gems series of books abounds with examples of doing less to go fast all the source code mostly c from these books can be downloaded here , by the way i wrote an article for mactech in on fast graphics rendering strategies for the mac , back when apple was using powerpc processors that article contains a lot of do stuff faster tips and tricks , some of which can certainly be adapted to non mac systems if you like the article , or even if you do n't , you might also want to look into dope vectors , sometimes called iliffe arrays my son who is years old showed me a particularly egregious example of code in need of optimization the other day justin is a big fan of runescape the massive online adventure game , and he obtained java source code to one of many knock offs of the runescape server that are floating around on the web i looked at the main loop and sat there stunned for a few minutes it contained easily the largest continuous sequence of if elses i 've ever seen the if elses were piled on so thick that when justin tried to insert one extra if else expression of his own , the class would no longer compile ! code is too big or something like that was the error message it turns out java has a hard coded max size limit , per method , of k in source code sun was way too lenient here , though i think the limit should be something closer to k this is the kind of thing that , if it were in c or javascript or a language that supports pointers to functions , would be a prime candidate for jump table conflation the natural syntax for long runs of if elses in c , java , or javascript is , of course , the switch statement , which the compiler under the covers implements as a jump table , usually but you can also implement it yourself , directly in javascript horrible runescape hacker way function updateuser user if user something state good handlegood user else if user something state bad handlebad user else if user something state terrible handleterrible user else if user something state messed up handlemessedup user else if kbytes more of this jump table way error checking omitted function updateuser user var table state good handlegood , state bad handlebad , state terrible handleterrible , state messed up handlemessedup table user something user dispatch ideally , of course , you 'd initialize the static table once and keep a permanent copy somewhere so you do n't always have to create it each time you enter the updateuser method , but even if you create it every time , it 's still cheaper than crunching through a ridiculously long list of if elses the moral , in this case , is that whenever you see a big , long run of if elses , consider that someone has handed you an optimization opportunity in tomorrow 's post , i'm going to run through some code for doing fast set manipulation in javascript just for fun , i 'll throw in some console ajax , and we 'll have a quick look at twitter 's social graph rest api the snippets i want to show you wo n't win any prizes for elegance , but hey , this is console code we 're talking about prettiness is n't on the requirements list later