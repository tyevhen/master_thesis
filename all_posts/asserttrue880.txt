people sometimes look at my javascript and wonder why there is so much backwards notation if null arguments return nothing to do if array length break and so on , instead of putting the null or the zero on the right side of the ' ' the way everyone else does the answer is , i'm a very fast typist and it 's not uncommon for me to type s when i meant to type ss , or when i meant to type , or when i meant to type in javascript , if i write the if clause in the normal not backwards way , and i mistakenly type for , like so if array length break then of course i'm going to destroy the contents of the array because in javascript , you can wipe out an array by setting its length to zero and my application is going to behave strangely or throw an exception somewhere down the line this general type of programmer error is what i call accidental assignment note that i refer to it as a programmer error it is not a syntactical error the interpreter will be only too happy to assign a value to a variable inside an if clause , if you tell it to and it may be quite some time before you are able to locate the bug in your program , because at runtime the interpreter will dutifully execute your code without putting messages in the console if an exception is eventually thrown , it could be in an operation that 's a thousand lines of code away from your syntactical blunder so the answer is quite simple if you write the if clause backwards , with zero on the left , an accidental assignment will be caught right away by the interpreter , and the resulting console message will tell you the exact line number of the offending code , because you ca n't assign a value to zero or to null , or to any other baked in constant in an expression like null x we say that null is not lvaluable the terms l value and r value originally meant left hand value and right hand value but when kernighan and ritchie created c , the meaning changed , to become more precise today an lvalue is understood to be a locatable value , something that has an address in memory a compiler will allocate an address for each named variable at compile time the value stored in this address its r value is generally not known until runtime it 's impossible , in any case , to refer to an r value by its address if it has n't been assigned to an l value , hence the compiler wo n't even try to do so and you 'll get an error if you try to compile null x on the other hand , x null is perfectly legal , and in k r days a c compiler would obediently compile such a statement whether it was in an if clause or not this actually resulted in some horrendously costly errors in the real world , and as a result , today no modern compiler will accept a bare assignment inside an if clause actually i can think of an exception but let 's save that for another time if you really mean to do an assignment inside an if , you must encapsulate it in parentheses not so with javascript , a language that like k r c assumes that the programmer knows what he or she is doing people unwittingly create accidental assignments inside if clauses all the time it 's not a syntactical error , so the interpreter does n't complain meanwhile you 've got a very difficult situation to debug , and the language itself gets blamed a poor craftsman always blames his tools as a defensive programming technique , i always put the non lvaluable operand on the left side of an equality operator , and that way if i make a typing mistake , the interpreter slaps me in the face at the earliest opportunity rather than spitting in my general direction some time later it 's a defensive programming tactic that has served me well i'm surprised more people do n't do it