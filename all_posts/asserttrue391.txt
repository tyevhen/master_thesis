i 've been using javascript for almost two decades now , but somehow i 've managed to avoid learning jquery until just recently , mostly out of laziness but also because of a lingering yet torrid love hate relationship with syntax sugar programming patterns the best thing i can say about jquery is that it has a seductively compact and powerful syntax the worst thing i can say about jquery is this repeatpreviousstatement for better or worse , i 've had to begin dabbling in jquery recently to save myself from the horror of old school bare knuckle dom parsing you know what i'm talking about nested loops with lots of calls to getelementsbytagname followed up with hand parsing of innerhtml who wants to do all that when you can use the oh so cute selector each construction ? the trouble with cute compact syntax as any recovering perl user will gladly tell you in return for a bottle of cheap sherry is that it 's write only when you go back to look at something a week later and see lines' worth of js functionality rolled up into a shockingly crisp yet thoroughly opaque jquery one liner , you often wish you 'd gone ahead and written those homely lines of javascript in the first place , instead of giving in to that one irresistibly sexy , powerful line of jquery that 's oh yeah btw also self obfuscating nonetheless , if you do a lot of page scraping as i do when visiting bioinformatics sites , the time savings of being able to parse a page with jquery can be formidable who can resist grabbing all rows of a table with tr ? who can resist iterating over them with each ? i tend to use the online apps at genomevolution org quite heavily the great folks who maintain that site have a nice way of serving up prodigious amounts of data in easy to use interactive forms , but sometimes you just want to harvest the data from a table and be done with it take the page i created at http genomevolution org r , which is based on a list of unique bacterial species in the group known as alphaproteobacteria if you go to that page and scroll over to the far right , you 'll see a column header labeled codon usage underneath that label is a get all codon tables link click that link and be prepared to wait about two minutes as the codon data loads for each organism it 's worth the wait , because when you 're done , you 're looking at color coded codon usage frequencies for all codons , for all organisms suppose you just want the codon data in text form , to analyze later ? scraping the raw data out of the html page is a royal bitch , because whether you know it or not , that page has tables embedded in tables embedded in tables parsing the dom by hand is shudder , wince well nigh unthinkable go to http genomevolution org r and click get all codon tables under the codon usage column heading allow a minute or two for codon data to load meanwhile , control shift j opens the chrome console select the console tab at the top of the window if it 's not already selected paste the following code into the console hit enter savor the power codondata function process var codons column var rowdata jquery 'td' , this var codonusage rowdata codons column textcontent split ? cca codondata push codonusage 'tr id gl ' each process oh jquery , must you tease me so ? console log codondata join n all of this was originally a single statement , with an inline callback function in typical jquery fashion i decided to unroll it into more verbose , easier to understand form , lest my head explode two weeks from now trying to re read and re figure out the code this bit of code does some pretty typical jquery things , such as grab all rows of a table with 'tr' , except that in this case i most certainly do not want all rows of all tables in the html page which would be hundreds of rows of extraneous stuff the rows i need happen to have an id attribute with a value that begins with gl the construction 'tr id gl ' is jquery 's syntax for selecting table rows that have an id attribute that begins with gl the here means begins with you could signify ends with using instead of the process callback fetches all table columns for the current row using the jquery 'td' , this construction , which means gives me a jquery object representing all td elements under the dom node represented by this in the callback context , this refers to the current jquery node , not the window object or function object if you choose as i did not to declare your callback with arguments , as in function mycallback arga , argb , then arga will be the index of the current item and argb will be this if you 're wondering about the regex ? cca , i need this because ordinarily the codon data would look like this codon usage the bacterial and plant plastid code transl table ccap ccgp cctp cccp cgar cggr cgtr cgcr caaq cagq cath cach ctal ctgl cttl ctcl gcaa gcga gcta gcca ggag gggg ggtg ggcg gaae gage gatd gacd gtav gtgv gttv gtcv acat acgt actt acct agar aggr agts agcs aaak aagk aatn aacn atai atgm atti atci tcas tcgs tcts tccs tga tggw tgtc tgcc taa tag taty tacy ttal ttgl tttf ttcf notice that first line codon usage the bacterial blah blah i just want the codon data , not the leader line but how to split off the codon data ? answer use a lookahead regular expression that does n't consume the match if you split on cca the first codon you will of course consume the cca , never to be seen again instead , use ? cca , with parentheses absolutely essential ! and the parser will look ahead to find an upcoming cca , then stop and match the spot right before the cca without consuming the cca i'm sure a true jquery expert can rewrite the foregoing code in a much more elegant , compact manner for me , elegant and compact are n't always optimal i 've learned to value readable and self documenting over elegant and opaque cute sexy is n't always best i 'll take homely and straightforward any day