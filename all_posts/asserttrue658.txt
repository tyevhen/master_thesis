java offers many ways to customize strokes and fills , including the use of gradient fills and image fills see this excellent tutorial by marty hall , but we tend to forget that procedural textures are easily implemented as custom paint the text shown above was painted using a custom paint class , sinepaint java , consisting of around lines of code not counting imports , as shown below scroll the code sideways to see lines that did n't wrap the sinepaint class procedurally generates a sine wave fill pattern in the red color channel , running in the 'y' direction vertical sine wave sinepaint kas thomas january public domain http asserttrue blogspot com a quick example of how to implement java awt paint import java awt paint import java awt paintcontext import java awt rectangle import java awt renderinghints import java awt geom affinetransform import java awt geom rectangled import java awt image colormodel import java awt image raster import java awt image writableraster class sinepaint implements paint public sinepaint public paintcontext createcontextcolormodel cm , rectangle devicebounds , rectangled userbounds , affinetransform xform , renderinghints hints return new contextcm , xform public int gettransparency return java awt transparency opaque class context implements paintcontext public contextcolormodel cm , affinetransform xform public void dispose public colormodel getcolormodel return colormodel getrgbdefault public raster getrasterint xoffset , int yoffset , int w , int h writableraster raster getcolormodel createcompatiblewritablerasterw , h float color new float row major traversal for int j j h j for int i i w i color color color write a sine wave pattern to the red channel color float math sin f double j h f raster setpixeli , j , color i j return raster getraster context sinepaint implementing the paint interface turns out not to be such a big deal there 's only one required method , createcontext public paintcontext createcontextcolormodel cm , rectangle devicebounds , rectangled userbounds , affinetransform xform , renderinghints hints most of the formal parameters are hints and can safely be ignored note that this method returns a java awt paintcontext object it turns out paintcontext is an interface as well , so you do end up having to implement it , and this is where the real action occurs the methods of the paintcontext interface include public void dispose public colormodel getcolormodel public raster getrasterint x , int y , int w , int h the dispose method releases any resources that were allocated by the class in our case , we allocated nothing and so our dispose method is empty the getcolormodel method can , in most cases , be a one liner that simply returns colormodel getrgbdefault the real action is in getraster that 's where you have the opportunity to set the pixel values for all the pixels in the raster based on their x y values if you 're familiar with shaders and or procedural textures , you know what this is about this is your opportunity to shade an area in accordance with a pixel 's x y location onscreen or rather , within the image if you 've been using the imagemunger app i wrote about a few days ago , you can run the following script with it to see sinepaint in operation this is the script that produced the colored text shown above paintedtext js kas thomas january public domain run this file using imagemunger http asserttrue blogspot com simple java class for running scripts html gd image creategraphics rh java awt renderinghints hint new rh rh key text antialiasing , rh value text antialias on gd setrenderinghints hint sinepaint new packages sinepaint gd setpaint sinepaint gd setfont new java awt font times new roman , java awt font bold , gd drawstring shiny , , gd drawstring text , , panel updatepanel scroll sideways to see lines that did n't wrap future projects make use of the affinetransform argument to enable scaled and otherwise transformed textures implement perlin noise as a type of paint implement bump map d effects in paint