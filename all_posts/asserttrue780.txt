there was a time , early in my programming career , when i needed to rewrite a particular program a very small one to make it run faster i was quite new to programming and thought that the way to get something to run faster was to rewrite it in assembly in those days , you could unroll a loop in assembly and pretty much count on getting a worthwhile speedup , if it was a tight loop to begin with fortunately , i had a fabulous mentor in those days , a coder with wisdom and experience far beyond his years the person in question was a first class code ninja and a master circuit designer , a genius of woz like proportions silicon obeyed him the way marble obeyed michelangelo when it came to code , john could do astounding things he could optimize and did optimize virtually any algorithm for any situation , and do it in so little code that you 'd sit there studying the printout , wondering where the heck the algorithm went ! i remember john had this peculiar way of making loops vanish , for example they 'd turn into table lookups or recursion or self modifying code , or some combination of the three one day my mentor asked me what i was working on and i told him i mentioned that i was frantically searching for a way to speed up my little program i described a few of the things i 'd tried so far he listened intently when i was done talking , john gave me some of the most profound advice any programming expert has ever given me it was profound for me , at the time maybe it 'll be stupid sounding to you the cpu , he said , runs at a certain speed it can execute a fixed number of instructions per second , and no more there is a finite limit to how many instructions per second it can execute right ? right , i said so there is no way , really , to make code go faster , because there is no way to make instructions execute faster there is only such a thing as making the machine do less he paused for emphasis to go fast , he said slowly , do less to go fast , do less do less go fast yes , of course it makes perfect sense there 's no other way to make a program run faster except to make it do less here , when i say program , i'm not talking about complex , orchestrated web apps or anything with fancy dependencies , just standalone executables in which there 's a main loop key takeaway do n't think in terms of making a slow piece of code run faster instead , think in terms of making it do less in many cases , doing less means using a different algorithm then again , it may be as simple as inserting a few if elses to check for a few trivial but frequently encountered special cases and return early , before entering a fully generalized loop it may mean canonicalizing your data in some way before passing it to the main routine , so that the main routine does n't have to include code that checks for corner cases the tricks are endless , but they end up with the cpu doing less , not more and that 's the key the go fast do less mantra has been a valuable one for me , paying off in many ways , in many situations , over the years it has helped me understand performance issues in a different kind of way i'm grateful to have been exposed to that concept early in my career so i provide it here for you to use or not use as you see fit maybe you received a similarly influential piece of advice early in your career ? if so , please leave a comment i 'd love to hear about it