i 've been having a torrid on again off again love affair with mozilla jetpack for the past several weeks , and i have to say , it 's been a bit exhausting at times but try as i may to walk away , i keep coming back for more i guess fools rush in where less impetuous web developers fear to tread it should be said up front that jetpack is quite immature at this point having been announced only a couple months ago and there 's a new release almost every week putting it through its paces feels a bit like driving a concept car it 's fun , it 's exciting , it 'll amaze your friends but is it ready for production ? the basic concept is compelling make it possible to develop javascript based firefox extensions that have special security privileges the ability to do cross site ajax , for example combined with the ability to vulture page objects at load time , a la greasemonkey the goal is to let mere mortals write firefox add ons without having to get mired in the xpcom morass if you 've ever tried to write a firefox extension , you know what i'm hinting at if not , you can get a good whiff here what can you do with jetpack ? right now , not a lot , other than peek and poke the dom as a page loads true , the mozlabs crew recently added audio recording support , and there 's a persistence api that does n't rely on cookies plus you can iterate through tabs , put stuff in the status bar , and create toaster popup notifications woo hoo but still , not a lot you can do most of this kind of stuff with greasemonkey that 'll all change soon , though , as jetpack 's apis expose more and more xpcom internals be clear , a year from now , no one will be mentioning greasemonkey and jetpack in the same breath even now , though , greasemonkey and jetpack are pretty far apart , under the covers one difference is the runtime scope jetpack runs above all open tabs this is quite handy , because it means you can easily enumerate and manipulate all open tabs i 'll provide some source code for this in a later post , something that 's all but impossible to do in greasemonkey another nice thing about jetpack is that it comes preloaded with jquery you do n't have to do anything special to access jquery methods just start using them there 's some built in support convenience methods for the twitter api , which is kind of interesting and you get an integrated development environment with bespin , which is pretty nice that , combined with instant on loading of scripts no need to restart firefox , makes for a rapid dev test cycle , greatly reducing rolaids consumption i 'll lead you through the dev workflow in my next post so you can get an idea of what it 's like to develop jetpack scripts there are a couple of issues one of them quite serious to be aware of , though first , you ca n't install and use a jetpack script without installing jetpack in other words you ca n't just give a script to a friend and say here , install this , it 's cool instead it 's go to the mozilla labs download page , install this week 's alpha build of jetpack , along with firebug , and pray god my script still works on your machine next week the mozlabs guys say that eventually , firefox may come with embedded jetpack support so that no one need proactively do a jetpack install before being able to use jetpack scripts that would be a very good thing , except for one potentially nasty issue the nastiness has to do with the way jetpack facilitates memory leakage simply put , it 's extraordinarily easy to write scripts that eventually cause firefox to hang one can argue that adhering to best practices will prevent this which is true , but i think that if the jetpack agenda truly does revolve around getting mere mortals people with modest javascript skills to participate en masse in creating firefox extensions , the potential exists for disaster you 're inevitably going to have large numbers of amateur programmers getting into trouble with memory leakage , and that 's not going to do anything good to firefox 's already poor reputation for memory leakage nor to jetpack 's reputation as i see it , the problem is really twofold fold number one has to do with the way xpconnect works xpconnect is the bridging technology that allows javascript to interoperate with xpcom objects written in c without going into gory detail , c and javascript have different memory management models one is a world of reference counting , the other is a mark and sweep world similar to java when you wrap a c object in such a way that it 's usable from javascript , you 're entering a whole new universe of memleak possibilities this is the domain where jetpack lives the second aspect of the problem is that the kinds of capabilities that attract programmers to something like greasemonkey or jetpack tend to draw on programming patterns that are inherently dangerous from a memleak point of view , chief among them the observer pattern sometimes i think the observer pattern is actually better termed the cyclic reference memleak pattern , because you 're basically creating objects and or wrappers that maintain references to each other it 's a great way to generate memory leaks again , any competent developer myself not included will understand the importance of best practices here , and staying out of trouble is not rocket science but to expect the average script kiddie to know or care about memleak mitigation is like expecting the average mcdonalds customer to know how to make a roux in any case , jetpack is an interesting beast and i continue to be fascinated by and infatuated with it enough so , that i intend to devote at least a couple more blog posts to it check back here in a day or two we 'll have some fun