ajax and ruby are driving a lot of changes in how people do web programming witness the resurrection of the hoary concept of continuations otherwise known as goto in a tuxedo the basic notion of a continuation is that it lets you exit from a scope using neither a return statement nor a throw nor a continue nor a break , go do something else , then reenter the original scope as if nothing happened in fact , if you serialize the continuation , you can come back months later , and continue in a new thread it may help to think of a continuation as a snapshot of the current call stack and program counter the main intuition is that if you can save off enough information about the current execution context , you can reenter that context at your leisure , kind of like hitting play again after pausing a video to go make popcorn the concept of continuations has been around a long time in fact , the formalisms around continuations were invented in order to talk meaningfully about the goto statement but the goto entered lexical leper status after dijkstra famously savaged it by , no self respecting programmer outside of the scheme community a leper colony in its own right would speak the word aloud , much less use it in a program and yet , goto is a reserved word in java the reason continuations are important to web is that they hold the key to making ajax scalable continuations enable a threadless polling architecture that would be hard to achieve cleanly any other way i 'll have more to say on continuations in the meantime , if you want to wrap your head around it further , i strongly recommend reading about cocoon 's use of continuations