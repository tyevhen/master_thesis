today i want to give a short bio hacking code lesson , and i want to keep it as simple as possible in case you 're just starting to use javascript and want to see what kinds of things it can do this lesson could prove handy to you even if you 're not a gene hacker , because it shows how easy it is to manipulate text in the browser for this example , i am going to assume that you have a text file open in the browser in particular , i'm going to assume the text file consists of a listing of two genes sequences in fasta format , which is actually very simple fasta consists of a header line that starts with the greater than angle bracket , followed by one or more lines of agtc base sequence data if it 's a nucleotide sequence or a bunch of letters kprmiv etc if it 's a protein sequence for example m leprae mblr this is the header atggcggtgctggatgtc this is the data your file might have several genes in fasta format , one after the other the question is how can you read this data with javascript ? actually , it 's extremely easy to read text data open any text file with your browser , then open a javascript window with firefox , use shift f to bring up the scratchpad , or with chrome use control shift j to read the text into a javascript variable called text , just type the following line into the script editor text document body textcontent execute this code with control l in firefox or by simply entering a carriage return in chrome if firefox fills your scratchpad with text , bracketed by and , that 's good it means the code worked delete it and proceed suppose you have several fasta records in a row and you want to have an array of gene data the easy thing to do is split the records at each header , discarding the header r n n g genes text split r note to enter more than one line of code in the chrome console , you have to hold the shift key down before hitting enter otherwise , enter executes the code the first line defines a regular expression r for the pattern greater than symbol followed by one or more non newline symbols , followed by a newline the caret symbol means to negate whatever 's in between the square brackets when this code executes , genes will be an array of data , but because of the way split works , the first item item zero in the array will be empty , so get rid of it with genes shift now the genes array will contain gene data the data for gene no will be in gene , the data for gene no will be in gene , etc incidentially , if you want an array of headers , just do headers text match r no need to do headers shift the match operation creates an exact array if your genes are aligned , you can compare them , base to base , in a loop if your genes are not aligned , create an alignment using an online clustalw alignment tool or using the popular mega program the following loop construct compares the first bases in two genes , and tallies the differences according to whether the difference occurred in codon base one , base two , or base three snp , , array to hold base , , results gene genes gene genes for var i i i snp i gene i ! gene i you can display the results in the console simply by adding on its own line snp or console logsnp or if you want to see it in a dialog , execute alertsnp the final line of code deserves explanation results are placed in the snp single nucleotide polymorphism array according to whether the hit occurred in base , base , or base of a codon the i construct i modulo means divide i by and throw away the answer but keep the remainder so for example , equals , equals zero , equals , etc as i increments , i simply takes on values of , , , , , , etc on the right side of the equals sign we have gene i ! gene i this means we want to compare the two genes at an offset of i , and if they are not equal ! , tally the resulting value true , or numerically the numeric result is added to the appropriate slot in snp note that javascript treats true as having a numeric value of one and false as having a numeric value of zero it knows to cast the boolean value to a number because of the symbol which means numerically add the following value to the existing value of the lefthand variable i hope this short tutorial was n't too painful if you 're new to javascript , my advice is experiment in the console firefox 's scratchpad or chrome 's js console a lot , and get familiar with the string functions split and match , because they can be incredibly useful , not to mention speedy either of those two functions can take a string argument or a regex but remember to put a 'g' after the regex if you want the operation to occur globally throughout the string for example abcdefabcdef match abc will only match the first occurrence of abc , whereas abcdefabcdef match abc g will match both occurrences of abc and give you an array of matches