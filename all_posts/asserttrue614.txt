acrobat has a mind destroyingly rich javascript api with hundreds upon hundreds of methods and properties , on dozens of object types , but one thing it sorely lacks is a selection object bluntly put , you ca n't write a line of code that fetches user selected text on a page which sucks massively , because in any modern browser i can do the equivalent of document getselection to get the text of the user 's selection if any on the current page in acrobat , alas , there 's no such thing using javascript , at least if you want to write a plug in to do the requisite magic using acrobat 's famously labyrinthine c api , be my guest i 'll see you at christmas but it seems like overkill does n't it ? to have to write a c plug in to do the work of one line of javascript fortunately , there 's a workaround i nearly fell off my barstool when i happened onto it it turns out follow me now you can get the exact location on a page of an annotation such as a highlight annotation using the acrobat javascript api and you can programmagically get the exact location on a pdf page of any arbitrary word on that page i thought about those two facts for awhile , and then a light bulb watt energy saver went off in my head if you 're willing to use the highlight annotation tool to make selections , and if you are willing to endure the indignity of iterating over every word on a page to compare each word 's location to the known location of the highlight annotation , you can discover exactly which words a user has highlighted on a page it 's a bit of a roundabout approach and wins no awards for elegance , but it works the first thing you have to know is that acrobat lets you do getannots page to obtain a list of annotation objects if any exist on the specified page just specify the zero based page number for page one of the document , etc the second thing you have to know is that every annotation has a gazillion properties , one of which is the list of quads for the annotation a quad simply contains the annotation 's location in rotated page space the key intuition here is that every annot has a bounding box think of it as a rectangle with an upper left corner , an upper right corner , and so on duh each corner has x , y coordinates in page space double duh since there are four corners and two coords for each , we 're talking about eight floating point numbers per quadrilateral i e , per quad okay cache that thought now consider that in the land of pdf , every word on a page also has a bounding box and adobe kindly provides us with a js method for obtaining the bounding box coordinates of the nth word on a page getpagenthwordquads page , n therefore it 's possible to build a function that accepts , as arguments , an annotation and a page number , and returns an array of all words on that page that intersect the quad space of the annot in question such a function looks like this function gethighlightedwords annot , pagenumber var annotquads annot quads var highlightedwords new array test every word on the page for var i i getpagenumwordspagenumber i var q getpagenthwordquads pagenumber , i if q annotquads if q annotquads q annotquads highlightedwords pushgetpagenthword pagenumber , i return highlightedwords test the function note that this test assumes there is at least one annotation on the current page page this pagenum current page firstannot getannots page words gethighlightedwords firstannot , page we can safely compare quad coords for exact equality thanks to the fact that when acrobat puts a highlight annot on a page , it sets the annot 's quad location to exactly the word 's location there 's no off by type of situation to worry about something to be aware of is that functions that return quad lists actually return an array of quads , not a single quad you 're usually interested in item zero of the array and recall that a quad is , itself , an array of eight numbers i tested the above function in acrobat using highlight annotations and voila ! it seems to work now if adobe will get busy and add a proper selection object to its javascript api , i can turn off the watt bulbs and hop back on my barstool , and get some real work done