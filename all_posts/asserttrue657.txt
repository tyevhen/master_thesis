the java advanced imaging api supports a number of interesting convolutions straight out of the box , and one of them is sobel edge detection the sobel edge detection kernel comes in two varieties , corresponding to horizontal edge detection and vertical edge detection you can combine them , and or run them serially against an image , to detect all edges in an image and that 's what the following code example in javascript does you can run the following script against an image of your choice using the imagemunger app i wrote about a few days ago be sure the java advanced imaging jars are in your classpath sobel js kas thomas january public domain an edge detection routine using java advanced imaging requires java advanced imaging library http java sun com products java media jai current html run this file using imagemunger http asserttrue blogspot com simple java class for running scripts html jai packages javax media jai sobelh jai kerneljai gradient mask sobel horizontal sobelv jai kerneljai gradient mask sobel vertical pb new packages java awt image renderable parameterblock imagemunger puts image in global scope pb addsource image pb add sobelh pb add sobelv renderedop jai jai create gradientmagnitude , pb var image renderedop getrendering getasbufferedimage panel setimage invertimage image take bufferedimage as arg flip all bits in all pixels function invertimage image var w image getwidth var h image getheight var pixels image getrgb , , w , h , null , , w for var i i pixels length i pixels i pixels i flip pixel bits image setrgb , , w , h , pixels , , w return image if you run the sobel operation by itself , you get a negative image , like so if you want the inverted version of this image see example further above , you need to invert the individual pixels of the image the super fast way to do it is with a lookup table , but you can also do the pixel inversion manually , in a loop , which is what i 've done for illustrative purposes in javascript the pixel inversion loop adds about one second of processing time for a x image the sobel filter by itself takes around a half a second sobel tends to be very sensitive to noise it will feature enhance specks and jpeg artifacts , so it often helps to smooth an image , first , with a blurring operation , prior to applying sobel future projects write a tunable version of sobel that can detect soft or hard edges , according to a tuning parameter write a version of sobel that 's tunable by color viz , detecting just blue edges , or just black edges , or just medium grey edges