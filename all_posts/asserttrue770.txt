i 've mentioned before that apis are a critical component of large enterprise software offerings the largest vendors realize this and treat api design very seriously some vendors , of course , actually productize their apis via sdks with their own installers , release notes , etc that 's often the case when the product has a well defined plug in architecture , for example many systems have multiple apis these days , to accommodate various abstraction levels programmatic vs soap , for example , as well as to expose different kinds of functionality offered by different subsystems there 's also the unfortunately common situation where a vendor has chosen to expose programmatic functionality through a proprietary , non standard scripting language this becomes an api of its own as well if there were such a thing as a middleware api maturity model , design by intention would surely be one of the principal stages apis run the spectrum from those that have a fully project managed development cycle of their own complete with requirements gathering , design docs and specifications , dev , qa testing , usability testing , documentation , etc to those that are put together on an ad hoc basis by a few developers who happen to have the time to do it quite a few apis are what i would call accidental they 've been built out on organically over a period of years they are what they are they are n't intentionally designed rather , their structure shadows that of the product 's existing codebase , thus the api inherits from the product development processes that preceded it , rather than having arisen through any well defined design process of its own ideally , it should be the other way around if anything , the api should precede the software at the very least , however , apis need to be intentionally designed there 's too much riding on them to allow them to just happen of course , once an api is in place , it 's hard to redesign it or refactor it legacy classes that follow legacy patterns have to be left in place for backward compatibility reasons , lest any changes break customer code new classes and methods get added , but few are removed an api that 's been added onto incrementally over a period of many years may have accumulated a staggering design debt after a point , reducing the debt becomes prohibitively painful when that point has passed , it does n't make sense to try to refactor the api unless the product itself is rewritten alas , in the software world , there 's no magic bailout to help with design debt my advice ? if you 're one of those software vendors who 've built out on existing apis in ad hoc fashion over a period of many years , now might be a good time to assess the state of your apis if nothing else , ask customers and partners maybe even your own engineers whether your apis are doing the job as well as they could be consider doing usability studies do your apis promote the use of accepted design patterns ? are classes and methods as self explanatory as they could be ? do experienced developers need to go to classroom training for a week in order to become productive ? or can a competent developer become productive on his or her own , in a reasonably short period of time ? take a stab at coming up with some metrics , and score your apis as to usability fitness to purpose put together a business case how much extra roi would your customers realize if your apis were even , say , or more usable than they are now ? how much roi would your company realize ? bottom line do n't underestimate the importance of having good apis and do n't assume that if the product design is good , apis will take care of themselves that 's like saying if an airplane 's design is good enough , it will fly itself that 's almost true the problem is the word almost