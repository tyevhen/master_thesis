this is a screenshot of the user interface for the procedural texture app i 've been playing around with the canvas api again , and this time i decided to create a simple html page that exposes an interface for creating procedural textures behind the scenes , i 've included perlin 's famous noise function see yesterday 's post for details the result is a tool that 's as powerful and fast as it is fun to play with and the best part is , you do n't need to host any files on a server you can run the app straight from disk , with no security restrictions , in chrome , firefox , or any html canvas capable browser the interface is simple there 's a text box where you can type some code see illustration at right whatever you type there will be executed against every pixel of the d canvas exposed globals include x the x coordinate of the current pixel y the y coord of the current pixel w the width of the canvas , in pixels h the height of the canvas r the red channel of the current pixel g the green value of the current pixel b the blue value of the current pixel perlinnoise noise u , v , w perlin 's d noise function offhand , you would n't think a loop that calls a callback for every pixel of a canvas image would be fast , but in reality the procedural shader can call out at a rate of over a million pixels per second if you make calls to the perlin noise function in your loop , that 'll slow you down to k pixels per second but that 's still pretty good the versatility of the noise function is truly amazing the key to using it effectively is to understand how to scale it by appropriately scaling the x and y parameters , you can stretch the noise space to any degree you want you can achieve very colorful results , of course , by applying the result in creative ways to the r , g , and b channels for example this texture was achieved with the following shader code n perlinnoise noisex , y , n math cos n r math roundn b r g r in this instance , the noise is scaled differently in x and y and then reflected back on itself so to speak using the cosine function , then the color channels are fiddled in such a way that whatever is n't red is blue by normalizing the texture space in various ways , you can end up with surprising effects for example , consider centerx w centery h dx x centerx dy y centery dist dx dx dy dy n perlinnoise noisex , y , r dist math round n g r b in this case , we calculate the pseudo distance from the center of the image as dx dx dy dy scaled by and fiddle with the colors to make the result red on a black background the parameters to noise have been scaled to give a relatively fine grain noise if you download the code for the procedural shader page given further below , you can play with this texture yourself try substituting larger or smaller values for the scaling numbers to see what happens a dramatically different effect can be obtained by normalizing x and y and applying trig functions creatively x w y h sizex sizey n perlinnoise noisesizex x , sizey y , x math cosn math pi x x math sqrtx y y r x g n x b y again , if you decide to download the code yourself , try playing with the various sizing parameters to see what the effect on the image is that 's the best way to get a feel for what 's going on as you know if you 've played with procedural textures before , you get a lot of mileage by normalizing x and y first to keep them in the range of and then using functions on them that are also normalized to produce output in the range sine and cosine can , of course , easily be normalized to stay in the range it goes without saying that once a number is in the range it can be squared or squared rooted and still fall in the range when you 're ready to apply the number to a color channel , then of course you should multiply by so that the result is in the range i 've included a number of presets in the procedural texture page including code for the foregoing images here 's another one that i like x w y h size n perlinnoise noisesize x , size y , b math sinn x g math cosn x r math sinn x i call this the noisy rainbow without the noise term , it simply paints a rainbow across the image space , but a little added noise gives the effect shown here the code includes a few more examples that are n't shown here i encourage you to download it and play with it simply copy and paste all of the code below into a text file and give it a name that ends in html then open it in chrome , firefox , or any canvas capable browser html head script a canvas demo by kas thomas http asserttrue blogspot com use as you will , at your own risk context null canvas null window onload function canvas document getelementbyid mycanvas canvas addeventlistener'mousemove' , handlemousemove , false context canvas getcontext d loadhiddentext function loadhiddentext var options document getelementsbytagname option var spans document getelementsbytagname span for var i i options length i options i value spans i innerhtml should probably be called resetcanvas function clearimage canvas width canvas width function drawviacallback var w canvas width var h canvas height var canvasdata context getimagedata , , w , h for var idx , x x w x for var y y h y index of the pixel in the array idx x y w the rgb values var r canvasdata data idx var g canvasdata data idx var b canvasdata data idx var pixel callback r , g , b , x , y , w , h canvasdata data idx pixel canvasdata data idx pixel canvasdata data idx pixel context putimagedata canvasdata , , function fillcanvas color context fillstyle color context fillrect , , canvas width , canvas height function dopixelloop var code document getelementbyid code value var f callback function pixel , x , y , w , h var r pixel var g pixel var b pixel code return r , g , b try evalf fillcanvas ffffff drawviacallback catche alert error e tostring function handlemousemove ev var x , y get the mouse position relative to the canvas element if ev layerx ev layerx firefox x ev layerx y ev layery else if ev offsetx ev offsetx opera x ev offsetx y ev offsety document getelementbyid mycanvas title x , y this is a port of ken perlin 's java code perlinnoise new function this noise functionx , y , z var p new array var permutation , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , for var i i i p i p i permutation i var x math floorx , find unit cube that y math floory , contains point z math floorz x math floorx find relative x , y , z y math floory of point in cube z math floorz var u fadex , compute fade curves v fadey , for each of x , y , z w fadez var a p x y , aa p a z , ab p a z , hash coordinates of b p x y , ba p b z , bb p b z the cube corners , return scalelerpw , lerpv , lerpu , gradp aa , x , y , z , and add gradp ba , x , y , z , blended lerpu , gradp ab , x , y , z , results gradp bb , x , y , z , from lerpv , lerpu , gradp aa , x , y , z , corners gradp ba , x , y , z , of cube lerpu , gradp ab , x , y , z , gradp bb , x , y , z function fadet return t t t t t function lerp t , a , b return a t b a function gradhash , x , y , z var h hash convert lo bits of hash code var u h ? x y , into gradient directions v h ? y h h ? x z return h ? u u h ? v v function scalen return n script head body canvas id mycanvas width height canvas br input type button value erase onclick clearimage select onchange document getelementbyid'code' innerhtml this value option choose something , then click execute option option basic perlin noise option option waterfall option option spherical nebula option option green fibre bundle option option orange blue marble option option blood maze option option yellow lightning option option downward rainbow wipe option option noisy rainbow option option burning cross option select br textarea id code type textarea cols rows enter code here textarea br input type button value execute onclick dopixelloop input type button value open as png onclick window opencanvas todataurl'image png' ! begin hidden text div hidden true span you can enter your own code here ! span span x w y h size n perlinnoise noisesize x , size y , r g b n span span x y y x w n perlinnoise noisex , y , b math round n g b r span span centerx w centery h dx x centerx dy y centery dist dx dx dy dy n perlinnoise noisex , y , r dist math round n g r b span span x w y h sizex sizey n perlinnoise noisesizex x , sizey y , x math sin x y math sinn y b n y x r y b g y span span centerx w centery h dx x centerx dy y centery dist math sqrtdx dx dy dy n perlinnoise noisex , y , dterm dist math round n r dist ? dterm b dist ? r g dist ? dterm span span n perlinnoise noisex , y , n math cos n r math roundn b r g r span span x w y h sizex sizey n perlinnoise noisesizex x , sizey y , x math cosn math pi x x math sqrtx y y r x g n x b y span span this uses no perlin noise x w y h b y math sin x g y math cos x r y math sin x span span x w y h size n perlinnoise noisesize x , size y , b math sinn x g math cosn x r math sinn x span span x w y h size n perlinnoise noisesize x , size y , x math cosn math pi x y math cos math pi y x math sqrtx y math sqrty r y x n g r b r span div ! end hidden text body html the texture presets have been placed in a hidden div containing a bunch of span elements , and then at runtime the html dropdown menu is populated by loadhiddentext the perlin noise function may look intimidating , but it 's not , really it 's a port of ken perlin 's java based reference implementation of noise see yesterday 's post for more information in the meantime , i encourage you to use this demo to explore the possibilities of procedural texture creation in html canvas i hope you agree with me , it 's a lot of fun , and educational as well