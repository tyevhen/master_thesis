top left the original image top right the image quantized to bits of color information per channel lower left bits of color per channel lower right bits per channel it turns out to be surprisingly quick and easy to quantize the colors in an image to a smaller number of bits per channel than the standard bits for red , bits for green , and bits for blue all you have to do is loop over the pixels and and them against the appropriate mask value a mask value of xfffff discards the lower bits' worth of color information from each channel , essentially leaving bits , each , for red , green , and blue a mask value of xffeee keeps just the top bits in each channel , while a mask of xffccc retains just bits of color per channel to obtain the images shown above , i ran the following script against them using these various mask values with the aid of the imagemunger java app that i gave code for earlier the imagemunger class simply opens an image of your choice you supply the filepath as a command line argument and runs the javascript file of your choice a second command line argument , putting variables image and panel in scope at runtime the image variable is just a reference to the bufferedimage object , representing your image the panel variable is a reference to the jcomponent in which imagemunger draws your image mask xffccc bits per channel xffeee bits per channel xfffff bits per channel var w image getwidth var h image getheight var pixels image getrgb , , w , h , null , , w for i , len pixels length i len i pixels i mask image setrgb , , w , h , pixels , , w panel updatepanel the getrgb method of bufferedimage fetches the pixels from your image as a giant one dimensional array the corresponding setimage method replaces the pixels the updatepanel method of panel defined in imagemunger java causes the jcomponent to refresh given that this is javascript and not java , we should n't be surprised to find that performance is n't exactly breakneck still , at pixels per millisecond , thoughput is n't terrible , either as you might expect , quantizing the color info makes the image easier to compress the original image , in png form , occupies kbytes on disk the bit per channel version occupies just k the bit version , k and the bit version , a little over k