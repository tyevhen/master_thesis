every year or two , i go back and re read certain papers , presentations , and book chapters that have inspired me or been the source of priceless aha moments one paper that i periodically revisit is john k ousterhout 's scripting higher level programming for the st century , written when ousterhout was affiliated with interwoven he 's currently a research professor at stanford if you 're not familiar with john k ousterhout , it might be because you do n't use tcl tool command language , the scripting language created by ousterhout sun microsystems hired ousterhout in specifically to accelerate the development of tcl it turns out that sun 's cto at the time the person who hired ousterhout was eric schmidt yes , that eric schmidt the whole story of the creation of tcl an interesting tale in its own right is told by ousterhout here in any case , if you have n't yet encountered ousterhout 's excellent scripting paper originally published in ieee computing , i recommend that you check it out do n't be misled by the date it 's still a very relevant paper rather than argue for or against scripting languages , ousterhout lays out the philosophy and relative benefits of various kinds of languages and explains , often with recourse to real world data , why certain languages are advantageous in certain situations and others are not ousterhout talks about the productivity multiplier effect of high level languages on average , each line of code in a system programming language translates to about five machine instructions , compared to one instruction per line in assembly language in an informal analysis of eight c files written by five different people , i found that the ratio ranged from about to instructions per line in a study of numerous languages capers jones found that for a given task , assembly languages require about times as many lines of code as system programming languages programmers can write roughly the same number of lines of code per year regardless of language , so system programming languages allow applications to be written much more quickly than assembly language the same effect applies when going from a high level compiled language to a scripting language , except that the multiplier effect is even greater as ousterhout says a typical statement in a scripting language executes hundreds or thousands of machine instructions the net result is summarized in the following graph this graph produced a kind of aha ! moment for me , because i realized in a way i somehow had n't , before that scripting languages were all about code reuse that if i could reduce the number of lines of code i write , i can almost by definition reduce the number of bugs i write and that if one can accomplish an operation by calling a library method such as the string replace method in javascript , scripted code can run at compiled language speed , because a scripting language 's built in methods are implemented in c spidermonkey or java rhino if you have n't read ousterhout 's paper before , i do n't want to spoil the suspense here suffice it to say , the paper gives a balanced account of the strengths and weaknesses of languages of all kinds there 's no language bigotry , no theological diatribes it 's a concise and eloquent treatment of a tricky topic , and considering the year in which it was written , it 's quite a prescient piece in many ways on top of everything else , it 's just plain entertaining to read a rarity these days , online or off