praise ye mighty gods on mt olympus it is , in fact , possible to do ajax from acrobat that 's the good news the rest of the news is how shall we say ? not entirely salutary , and certainly not well documented but it 's pretty interesting nonetheless while it 's certainly good news that you can do ajax from acrobat , adobe for whatever reason has chosen not to follow the well accepted idiom in the web world of allowing ajax code to run in the context of a web document in other words , you ca n't just put your ajax code in a pdf as a field script in a form , say , then serve the pdf and expect to phone home to the server while the user is interacting with the pdf document instead , adobe requires that you put your ajax calls in a folder level script , which is to say a static file that lives on your hard drive in a special subpath under your acrobat install path this is roughly the equivalent of firefox requiring that all ajax be done in the context of a greasemonkey script , say , or in the context of jetpack hardly convenient the magic comes in a method called net http request , which is part of the acrobat javascript api you 'll find it documented on page of the javascript for acrobat api reference , april edition due to security restrictions supposedly , this method cannot be used in pdf forms , nor in a document context , nor even in the js console it must specifically be used in a folder script if you look in your local acrobat install hierarchy , you 'll find a folder under acrobat called javascripts what you need to do is create an ordinary text file , put your code inside it , and save that file with a js extension in your javascripts folder acrobat will then load that file and execute its contents at program launch time if you 're paying attention , you 'll notice right away that this means developing ajax scripts for acrobat is potentially rather tedious in that you have to restart acrobat every time you want to test a change in a script something else you 're going to notice when you actually get around to testing scripts is that acrobat pukes gives a security error if you do n't explicitly tell acrobat to trust the particular document that 's open while you 're running the script this makes relatively little sense to me after all , if it 's a folder script running outside the document context , why do i have to have a document open at all , and why do i now have to designate that doc as trusted ? as we say in aviation , whiskey tango foxtrot whatever jumping through the hoops is easy enough to do in practice to specify the doc as trusted , go to the edit menu and choose preferences or just hit control k in the dialog that appears , choose security enhanced from the list on the left , then click the add file button and navigate to the document in question once you do this , you can run the ajax code in your folder level script but wait how do you run the script ? what 's the user gesture for triggering a folder script ? the answer is , you need to include code in the script that puts a new custom menu command on the file menu the user can select that command to run the script without further head scratching , let me just show you some code that works ajax functioncurl var params cverb get , curl curl , ohandler response functionmsg , uri , e , h var stream msg var string string soap stringfromstream stream app alert string net http requestparams app addmenuitem cname ajax , cparent file , cexec 'ajax http localhost mypage ' , cenable event rc event target ! null , npos read the code from the bottom up the app addmenuitem call at the bottom adds a new menu command , ajax , to acrobat 's file menu when the command fires , it executes the code in cexec for now , you can ignore the code in cenable , which simply tests if a document is open the ajax menu command will dim if there 's no open pdf doc before going further , let 's take note of the fact that the magical net http request method needs one parameter a parameter block object the parameter block , in turn , needs to have , at a bare minimum , a curl property containing a url string pointing to the server resource you 're trying to hit and a cverb property containing one of 'get' , 'post' , 'put' , 'delete' , 'options' , or 'head' , or one of the allowed webdav verbs , or 'mkcalendar' optionally , the request block can also have a property called ohandler that will have its response method called asynchronously , of course when the server is ready to respond so the basic notion is craft a param block , hand it to the net http request method , and let params ohandler response get a callback so far , so good but what should you do inside response ? well , when response is called , it 's called with four arguments the first is the response body as a stream object more about which in a minute the second is the request url you used to get the response the third is an exception object the fourth is an array of response headers this is all sparsely documented in adobe 's javascript for acrobat api reference what 's not so well documented by adobe is what the heck you need to do in order to read a stream object i 'll spare you the suspense it turns out the stream object is a string containing hex encoded response data the easiest way to decode it is to call soap stringfromstream on the stream , as illustrated above there 's more lots more to doing ajax from acrobat i have n't yet touched on authentication , for example , or webdav , or even how to do post instead of get , but these are the basics if you end up doing something interesting with acrojax , be sure to add a comment below and if you want to know how to do acrobat ajax against an apache sling repository , watch my blog space at dev day com i 'll be writing about that soon