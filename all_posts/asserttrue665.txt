i like to do a bit of d and d graphics programming in my spare time the trouble is , java gets a bit heavy at times , and i look for ways to test new ideas quickly testing ideas quickly means scripting but how do you get at pixel values with javascript ? the answer is , you write a super simple java class that can load an image and hand off pixels to the javascript context the following is such a class imagemunger kas thomas http asserttrue blogspot com public domain code all it does is open an image , display it in a window , and run a script file usage imagemunger myimage jpg myscript js the javascript file will at runtime have two global variables , panel and image , in scope they correspond to the imagepanel inner class instance and the bufferedimage that 's displaying in the panel that way , your script can easily manipulate the image and or the panel import java awt graphics import java awt image bufferedimage import java io bufferedreader import java io file import java io fileoutputstream import java io filereader import java io ioexception import java io outputstream import javax imageio imageio import javax swing jcomponent import javax swing jframe import javax script scriptengine import javax script scriptenginemanager public class imagemunger this inner class is our canvas we draw the image on it class imagepanel extends jcomponent bufferedimage theimage null imagepanel bufferedimage image super theimage image public bufferedimage getimage return theimage public void setimage bufferedimage image theimage image this updatepanel public void updatepanel invalidate getparent dolayout repaint public void paintcomponent graphics g int w theimage getwidth int h theimage getheight g drawimage theimage , , , w , h , this end imagepanel inner class we need to keep a reference to the imagepanel public imagepanel theimagepanel null constructor public imagemunger string args parseargs args open image bufferedimage image openimagefile args create window theimagepanel new imagepanel image jframe gmainframe new jframe gmainframe settitle args gmainframe setbounds , , image getwidth , image getheight gmainframe setdefaultcloseoperation dispose gmainframe getcontentpane add theimagepanel gmainframe setvisibletrue imagepanel getimagepanel return theimagepanel bufferedimage openimagefile string fname bufferedimage img null try file f new file fname img imageio readf catch exception e showmessage trouble reading file e printstacktrace return img public static void runscriptfromfile string filename , scriptengine engine try engine evalnew java io filereader filename catch exception exception exception printstacktrace showmessage exception getmessage public static void showmessagestring s javax swing joptionpane showmessagedialognull , s void parseargs string args if args length telluserhowtousethisapp void telluserhowtousethisapp showmessage supply an image file name and a script file name main public static void main string args imagemunger munger new imagemunger args create a script engine manager engine scriptenginemanager factory new scriptenginemanager scriptengine engine factory getenginebyname javascript engine put image , munger getimagepanel getimage engine put panel , munger getimagepanel engine put args , args evaluate javascript code from file runscriptfromfile args , engine this java app does two things , based on arguments provided on the command line first , it opens an image of your choice you supply the file path as the first command line arg in a jframe secondly , it opens and executes the javascript file whose path you supply as the second command line argument before executing the script , the java app puts two variables , image and panel , into the javascript runtime scope these are references to the bufferedimage object , and the jcomponent that renders it , respectively that way , it 's easy to manipulate the image and or its jcomponent at runtime , using script here 's an example suppose you want to convert a color jpeg into a grayscale black and white image you would write a script like the following and put it in a js file on disk then run the imagemunger app and have it execute the script desaturate js converts rgb image to grayscale function desaturate if image null java lang system out println nothing to do no source image return var w image getwidth var h image getheight var pixels image getrgb , , w , h , null , , w var tmp for var i i pixels length i get green value tmp pixels i set red , green , and blue channels the same pixels i tmp tmp tmp image setrgb , , w , h , pixels , , w panel updatepanel no real magic here the script just grabs pixels from the bufferedimage via the image global that we put into the js scope , converts all pixels in the image to monochrome rgb values , stuffs the pixels back into the image , and requests a redraw of the imagepanel using the panel global no rocket science just quick and dirty pixel banging perfect if you 're into peeking and poking pixels late at night but like to avoid getting java under your fingernails just before climbing into a clean bed