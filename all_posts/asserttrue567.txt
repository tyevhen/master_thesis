this is a screenshot of the shader ui showing what basic turbulence looks like as an update to my earlier post on procedural texturing in html canvas , i wanted to post an improved faster version of the earlier code that also incorporates a turbulence function , which is probably more properly called fractal noise first , hat 's off to ryan sturgell for pointing out that by moving the big array initialization outside of the this noise function call , it 's possible to speed up the perlin noise function several fold which should have been obvious , but i missed it on the first go round doh in any case , the noise function in the improved code below now can process k pixels per second , which is a significant improvement indeed turbulence the turbulence function adds perlin noise of various frequencies together , like so function turbulence x , y , z , octaves var t var f var n for var i i octaves i , f n perlinnoise noisex f , y f , z f t f return n t rescale back to this has the net result of giving noise that is much more realistic for things like cloud textures or smoke for example x w y h size y biasy , n turbulencesize x , size y , y , y math sqrty r biasy , n g r this code uses turbulence to generate the cloud pattern and bias to stretch the sky a bit at the top and stretch the red value vertically as well without further ado , here 's the complete code for the shader page copy and paste all of the following code into a text file and give it a name that ends with html then open it in chrome , firefox , or any html capable browser html head script a canvas demo by kas thomas http asserttrue blogspot com use as you will , at your own risk context null canvas null window onload function canvas document getelementbyid mycanvas canvas addeventlistener'mousemove' , handlemousemove , false context canvas getcontext d loadhiddentext function loadhiddentext var options document getelementsbytagname option var spans document getelementsbytagname span for var i i options length i options i value spans i innerhtml should probably be called resetcanvas function clearimage canvas width canvas width function drawviacallback var w canvas width var h canvas height var canvasdata context getimagedata , , w , h for var idx , x x w x for var y y h y index of the pixel in the array idx x y w the rgb values var r canvasdata data idx var g canvasdata data idx var b canvasdata data idx var pixel callback r , g , b , x , y , w , h canvasdata data idx pixel canvasdata data idx pixel canvasdata data idx pixel context putimagedata canvasdata , , function fillcanvas color context fillstyle color context fillrect , , canvas width , canvas height function dopixelloop var code document getelementbyid code value var f callback function pixel , x , y , w , h var r pixel var g pixel var b pixel code return r , g , b try evalf fillcanvas ffffff drawviacallback catche alert error e tostring function handlemousemove ev var x , y get the mouse position relative to the canvas element if ev layerx ev layerx firefox x ev layerx y ev layery else if ev offsetx ev offsetx opera x ev offsetx y ev offsety document getelementbyid mycanvas title x , y this is a port of ken perlin 's java code perlinnoise new function var p new array var permutationfor var i i i p i p i permutation i this noise functionx , y , z var x math floorx , find unit cube that y math floory , contains point z math floorz x math floorx find relative x , y , z y math floory of point in cube z math floorz var u fadex , compute fade curves v fadey , for each of x , y , z w fadez var a p x y , aa p a z , ab p a z , hash coordinates of b p x y , ba p b z , bb p b z the cube corners , return scalelerpw , lerpv , lerpu , gradp aa , x , y , z , and add gradp ba , x , y , z , blended lerpu , gradp ab , x , y , z , results gradp bb , x , y , z , from lerpv , lerpu , gradp aa , x , y , z , corners gradp ba , x , y , z , of cube lerpu , gradp ab , x , y , z , gradp bb , x , y , z function fadet return t t t t t function lerp t , a , b return a t b a function gradhash , x , y , z var h hash convert lo bits of hash code var u h ? x y , into gradient directions v h ? y h h ? x z return h ? u u h ? v v function scalen return n function turbulence x , y , z , octaves var t var f var n for var i i octaves i , f n perlinnoise noisex f , y f , z f t f return n t rescale back to perlin 's bias function function bias a , b return math powa , math logb math log script head body canvas id mycanvas width height canvas br input type button value erase onclick clearimage select onchange document getelementbyid'code' innerhtml this value option choose something , then click execute option option basic perlin noise option option basic turbulence option option waterfall option option spherical nebula option option green fibre bundle option option orange blue marble option option blood maze option option yellow lightning option option downward rainbow wipe option option noisy rainbow option option burning cross option option fair skies option select br textarea id code type textarea cols rows enter code here globals r , g , b , x , y , w , h , perlinnoise noisea , b , c textarea br input type button value execute onclick dopixelloop input type button value open as png onclick window opencanvas todataurl'image png' ! begin hidden text div hidden true span you can enter your own code here ! span span x w y h size n perlinnoise noisesize x , size y , r g b n span span x w y h size n turbulencesize x , size y , , r g b n span span x y y x w n perlinnoise noisex , y , b math round n g b r span span centerx w centery h dx x centerx dy y centery dist dx dx dy dy n perlinnoise noisex , y , r dist math round n g r b span span x w y h sizex sizey n perlinnoise noisesizex x , sizey y , x math sin x y math sinn y b n y x r y b g y span span centerx w centery h dx x centerx dy y centery dist math sqrtdx dx dy dy n perlinnoise noisex , y , dterm dist math round n r dist ? dterm b dist ? r g dist ? dterm span span n perlinnoise noisex , y , n math cos n r math roundn b r g r span span x w y h sizex sizey n perlinnoise noisesizex x , sizey y , x math cosn math pi x x math sqrtx y y r x g n x b y span span this uses no perlin noise x w y h b y math sin x g y math cos x r y math sin x span span x w y h size n perlinnoise noisesize x , size y , b math sinn x g math cosn x r math sinn x span span x w y h size n perlinnoise noisesize x , size y , x math cosn math pi x y math cos math pi y x math sqrtx y math sqrty r y x n g r b r span span x w y h size y biasy , n turbulencesize x , size y , y , y math sqrty r biasy , n g r b r span div ! end hidden text body html incidentally , i did find a halfway decent discussion of noise and turbulence online , written by ken perlin himself , at http http developer nvidia com gpugems gpugems ch html read it and reap !