i'm slowly but surely coming to grips with cmis content management interoperability services , which will soon be the lingua franca of crud in the content management world , and maybe some other worlds as well after reading some of the cmis draft docs and watching a couple of emc 's cmis videos at youtube , i'm starting to grok the basic abstractions here are a few first impressions i offer these impressions as constructive criticism , btw , not pot shots i want to see cmis succeed which also means i want to see it done right the v draft doc for the domain model says there are four top level first class , root object types document , folder , relationship , and policy support for the policy type is optional so there are basically three root types already i question whether there should n't perhaps be a top level object type cmisobject that everything inherits from , rather than four root objects , since presumably all four basic object types will share at least a few characteristics in common but maybe not page of the part i doc says that administration is out of scope for cmis but later on , we learn that a policy object represents an administrative policy that can be enforced by a repository we also find applypolicy and removepolicy operations , which are clearly administrative in intent remarkably , policy objects can be manipulated through standard cmis crud operations but do not have a content stream and are not versionable however , they may be fileable , queryable , or controllable why are we treating this object as a file fileable but not allowing it to be versionable ? and why are we pretending it does n't have a content stream ? and why are we saying may be ? this is too much fuzziness , it seems to me right now , the way cmis part i is worded , a policy can be anything one might as well call it rules or aspects or otherstuff the word policy has a specific connotation , though where i come from , it implies things like compliance and governance , things that may intersect role constraints , separation of duties , rbac , and possibly a lot more and yes , these concepts do come up in content management , in the context of workflow but it seems to me that policy , by any conventional definition , is rather far afield from where cmis should be concentrating right now if policy means something else here , let 's have a good definition of it and let 's hear the argument for why it should be exposed to client apps i say drop the policy object type entirely it 's baggage keep the spec light i like the idea of having relationships as a top level object type the notion here is that you can specify the designation of a source object and a target object that are related in some way that the two objects do n't need to know about i like it it feels suitably abstract and it models a construct that 's used in all sorts of ways in content management systems today the folder object type , otoh , is too concrete for my tastes we need to stop thinking in terms of folder which is a playful non geek term for directory , designed to make file systems understandable by people who know about manila folders , and think more abstractly what notions are we really trying to encapsulate with the object type currently dubbed folder ? at first blush , it would seem as though navigability navigational axes constitutes the core notion , but the possible graphs allowed by folder do not match popular navigational notions inherent in file system folders at least on windows in other words , the many to many parent child mappings allowed by cmis 's folders destroy the conventional folder metaphor , unless you 're a computer science geek , in which case you do n't think in terms of folders anyway i think what folder should try to encapsulate is a collection of relationships a navigation hierarchy whether treelike or not is just one possible subclass of such a collection we cheat ourselves by trying to emulate , at the outset , some parochial notion of folders based on a particular type of graph we need folder to be more general it is a collection of relationships we already have relationships , so why not take the opportunity to reuse them here ? i 'd like to see more discussion about folders , but i fear that the rush to get cmis blessed by oasis may have already precluded further discussion of this important issue i hope i'm wrong interesting stuff , though , this cmis and wow , do i still have a lot of grokking to do