ever since java came out , i 've been a big fan of java beans xmlencoder , which lets you serialize runtime objects including the values of instance variables , etc as xml , using just a few lines of code xmlencoder e new xmlencoder new bufferedoutputstream new fileoutputstream test xml e writeobjectnew jbutton hello , world e close this is an extraordinarily useful capability you can create an elaborate swing dialog for example containing dozens of nested widgets , then serialize the whole thing as a single xml file , capturing its state , using xmlencoder then deserialize it later , in another time and place , perhaps a favorite trick of mine is to serialize an application 's key objects ahead of time , then jar them up and instantiate them at runtime using xmldecoder with a swing dialog , this eliminates a ton of repetitive container add somewidget code , and similar swing incantations you know what i'm talking about so it cleans up your code incredibly it also makes swing dialogs and other objects declarative in nature they become static xml that you can edit separately from code , using xml tools at runtime , of course , you can use dom and other xml manipulation technologies to tweak serialized objects before instantiating them let your imagination run as an aside i am constantly shocked at how many of my java programming friends have never heard of this class if there 's a down side to xmlencoder , it 's that it will only serialize java beans , or so the documentation says , but actually the documentation is not quite right more on that in a moment with swing objects , for example , xmlencoder will serialize widgets but not any event handlers you 've set on them at runtime , you end up deserializing the swing object , only to have to hand decorate it with event handlers before it 's usable in your application there 's a solution for this , and again it 's something relatively few java programmers seem to know anything about in a nutshell , the answer is to create your own custom persistence delegates xmlencoder will call the appropriate persistence delegate when it encounters an object in the xml graph that has a corresponding custom delegate this is need i say ? exceptionally handy , because it provides a transparent , interception based approach to controlling xmlencoder 's behavior , at a very fine level of control if you have a swing dialog that contains different widget classes some of them possibly containing multiple nested objects , many of which need special treatment at deserialization time , you can configure an xmlencoder instance to serialize the whole dialog in just the fashion you need the nuts and bolts of this are explained in detail in this excellent article by philip milne the article shows how to use custom persistence delegates to make xmlencoder serialize almost any java object , not just beans suffice it to say , you should read that article if you 're as excited about xmlencoder as i am